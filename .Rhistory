cr.min<-val.check[val.select]
cursor.adj<-c(curs3.2=ts.min, certainty=cr.min)
} # end of 2nd if
} # end of if
sample[["cursor.adj"]]<-cursor.adj
sample
#2
list.converted<-lapply(list.converted, function(sample){
curs.Geo<-sample[["Cursors"]][["curs3.2"]] #cursor predetermined in Geoworks
cursor.adj<-c(curs3.2=curs.Geo, certainty=9)
if (sample[["Parameters"]]["CyclN"]=="SOIL" | sample[["Parameters"]]["CyclN"]=="SOIL TS") {
temp.curs<-ifelse(is.na(curs.Geo),NA,sample[["Pyrolysis"]][["T"]][curs.Geo])
if (temp.curs>=398 & temp.curs<=402 & !is.na(temp.curs)) {
# Determine pseudo-derivatives of the curve with varying lag (to exlcude random noise)
deriv1 <-diff(sample[["Pyrolysis"]][["CO2"]], lag = 1, differences=1)
deriv4 <-diff(sample[["Pyrolysis"]][["CO2"]], lag = 4, differences=1)
deriv10<-diff(sample[["Pyrolysis"]][["CO2"]], lag = 10, differences=1)
# Time steps where derivative is 0
ts.deriv1 <-which(rowSums(embed(sign(deriv1) ,1)) == 0)
ts.deriv4 <-which(rowSums(embed(sign(deriv4) ,1)) == 0)+2
ts.deriv10<-which(rowSums(embed(sign(deriv10),1)) == 0)+5
# Determine the three lowest values within the time range where valley would be
tr.min<-s.seq(sample[["Cursors"]]["curs3.2"],sample[["Cursors"]]["curs3.3"])
ts.min<-head(order(sample[["Pyrolysis"]][["CO2"]][tr.min]),3)+sample[["Cursors"]]["curs3.2"]
if(plot == TRUE){
plot(sample[["Pyrolysis"]][["CO2"]][300:1200],type="l")
#points(ts.deriv1-300,  sample[["Pyrolysis"]][["CO2"]][ts.deriv1],  col = "grey")
points(ts.deriv4-300,  sample[["Pyrolysis"]][["CO2"]][ts.deriv4],  col="grey")
points(ts.deriv10-300, sample[["Pyrolysis"]][["CO2"]][ts.deriv10], col="red3")
points(ts.min-300,sample[["Pyrolysis"]][["CO2"]][ts.min], col="blue3", pch=15)
} # end of 3rd if
val1.check<- ts.min[1] %in% ts.deriv1 + ts.min[1] %in% ts.deriv4 + ts.min[1] %in% ts.deriv10
val2.check<- ts.min[2] %in% ts.deriv1 + ts.min[2] %in% ts.deriv4 + ts.min[2] %in% ts.deriv10
val3.check<- ts.min[3] %in% ts.deriv1 + ts.min[3] %in% ts.deriv4 + ts.min[3] %in% ts.deriv10
val.check<-c(val1.check,val2.check,val3.check)
val.select<-which.max(val.check)
ts.min<-ts.min[val.select]
cr.min<-val.check[val.select]
cursor.adj<-c(curs3.2=ts.min, certainty=cr.min)
} # end of 2nd if
} # end of if
sample[["cursor.adj"]]<-cursor.adj
sample
}) # end of apply
#3
list.values<-as.data.frame(
do.call(rbind, lapply(list.converted, function(sample)sample[["cursor.adj"]])))
uncertain.val<-which(list.values["certainty"]<2)
if(length(uncertain.val)>0){
warning(sprintf("Was unable to determine a true valley for minimum value in item %i: %s. \n",
uncertain.val,
row.names(list.values)[uncertain.val]))
}
#4
list.converted<-lapply(list.converted, function(sample){
sample[["Cursors"]][["curs3.2"]]<-sample[["cursor.adj"]][["curs3.2"]]
sample[["cursor.adj"]]<-NULL
sample
})
rm(list=ls())
library(tidyverse)
devtools::load_all()
dataloc<-"D:/PhD/Rock-Eval/Maarten_2501 - Copy/BULK ROCK"
data<-RE_read(dataloc)
test<-RE_cursadjust(data)
RE_plot(test,"S_2501_0036.B00","Pyrolysis","CO2")
test<-RE_cursadjust(data)
test<-RE_cursadjust(data, plot=T)
test<-RE_cursadjust(data, plot=T)
devtools::load_all()
data<-RE_read(dataloc)
test<-RE_cursadjust(data, plot=T)
RE_plot(test,"S_2501_0036.B00","Pyrolysis","CO2")
test<-RE_cursadjust(data)
RE_plot(test,"S_2501_0036.B00","Pyrolysis","CO2")
RE_plot(test,3,"Pyrolysis","CO2")
RE_plot(test,10,"Pyrolysis","CO2")
test<-RE_cursadjust(data)
devtools::load_all()
test<-RE_cursadjust(data)
RE_plot(test,3,"Pyrolysis","CO2")
RE_plot(test,10,"Pyrolysis","CO2")
test2<-RE_convert(test)
test3<-RE_surfaces(test2)
test4<-RE_metrics(test3)
test5<-RE_SebagIR(test4)
test6<-RE_Tpercentiles(test5)
test7<-RE_Ccombined(test6)
devtools::load_all()
test7<-RE_Ccombined(test6)
test8<-RE_OHcombined(test7)
table<-RE_extracttable(test8)
devtools::load_all()
table<-RE_extracttable(test8)
View(table)
View(test8)
dataloc<-"//WURNET.NL/Homes/hoef006/My Documents/- Data/Verwerking/Rock-Eval/240429"
data<-RE_read(dataloc)
warnings()
View(data)
list.extended<-test8
#1.2 define safe sequence in case of NAs
s.seq<-function(x,y){
if (all(is.na(x))|all(is.na(y))) {NA} else {
seq(x,y,by=1)}
}
if(vector[length(vector)-1]>tail(sample[[oven]][["T"]],1)){
warning("The highest given interval is above the cool down temperature, which may give unwanted results. The input range should exclude your min and max temperature.")
}
oven<-"Pyrolysis"
thermogram<-"CO2"
vector<-c(300,400,500)
if(vector[length(vector)-1]>tail(sample[[oven]][["T"]],1)){
warning("The highest given interval is above the cool down temperature, which may give unwanted results. The input range should exclude your min and max temperature.")
}
sample<-list.extended[[1]]
if(vector[length(vector)-1]>tail(sample[[oven]][["T"]],1)){
warning("The highest given interval is above the cool down temperature, which may give unwanted results. The input range should exclude your min and max temperature.")
}
if(vector[1]<=head(sample[[oven]][["T"]],1)){
warning("The lowest given interval is below the starting temperature, which may give unwanted results. The input range should exclude your min and max temperature.")
}
invector<-c(0,vector)
invector<-c(0,vector)
for (i in 2:length(invector)) {
tr.i<-which(sample[[oven]][["T"]]>=invector[i-1] &
sample[[oven]][["T"]]<=invector[i])
a.tr<-sample[[oven]][["t"]][tr.i]
a.val<-sample[[oven]][[thermogram]][tr.i]
area.i<-RE_traparea(a.tr,a.val)
}
i<-1
tr.i<-which(sample[[oven]][["T"]]>=invector[i-1] &
sample[[oven]][["T"]]<=invector[i])
a.tr<-sample[[oven]][["t"]][tr.i]
i<-2
tr.i<-which(sample[[oven]][["T"]]>=invector[i-1] &
sample[[oven]][["T"]]<=invector[i])
a.tr<-sample[[oven]][["t"]][tr.i]
a.val<-sample[[oven]][[thermogram]][tr.i]
area.i<-RE_traparea(a.tr,a.val)
areas<-c()
for (i in 2:length(invector)) {
tr.i<-which(sample[[oven]][["T"]]>=invector[i-1] &
sample[[oven]][["T"]]<=invector[i])
a.tr<-sample[[oven]][["t"]][tr.i]
a.val<-sample[[oven]][[thermogram]][tr.i]
area.i<-RE_traparea(a.tr,a.val)
areas<-c(area,area.i)
}
for (i in 2:length(invector)) {
tr.i<-which(sample[[oven]][["T"]]>=invector[i-1] &
sample[[oven]][["T"]]<=invector[i])
a.tr<-sample[[oven]][["t"]][tr.i]
a.val<-sample[[oven]][[thermogram]][tr.i]
area.i<-RE_traparea(a.tr,a.val)
areas<-c(areas,area.i)
}
order(c(100,500,300))
sort(c(100,400,200))
#2.3 Calulcate the part left after the highest temperature
tr.end<-which(sample[[oven]][["T"]]>=invector[])
#2.3 Calulcate the part left after the highest temperature
tr.end<-which(sample[[oven]][["T"]]>=invector[length(invector)])
a.tr<-sample[[oven]][["t"]][tr.end]
a.val<-sample[[oven]][[thermogram]][tr.end]
area.end<-RE_traparea(a.tr,a.val)
areas<-c(areas,area.end)
#2.3 Calulcate the part left after the highest temperature
tr.end<-which.max(sample[[oven]][["T"]]>=invector[length(invector)])
#2.3 Calulcate the part left after the highest temperature
tr.end<-s.seq(which.max(sample[[oven]][["T"]]>=invector[length(invector)]),
length(sample[[oven]][["T"]]))
a.tr<-sample[[oven]][["t"]][tr.end]
#2.3 Calulcate the part left after the highest temperature
tr.end<-s.seq(which.max(sample[[oven]][["T"]]>=invector[length(invector)]),
length(sample[[oven]][["T"]]))
a.tr<-sample[[oven]][["t"]][tr.end]
a.val<-sample[[oven]][[thermogram]][tr.end]
area.end<-RE_traparea(a.tr,a.val)
invector<-c(0,sort(vector))
areas<-c()
#2.2 Loop over input vector to determine the zones
for (i in 2:length(invector)) {
tr.i<-which(sample[[oven]][["T"]]>=invector[i-1] &
sample[[oven]][["T"]]<invector[i])
a.tr<-sample[[oven]][["t"]][tr.i]
a.val<-sample[[oven]][[thermogram]][tr.i]
area.i<-RE_traparea(a.tr,a.val)
areas<-c(areas,area.i)
}
#2.3 Calulcate the part left after the highest temperature
tr.end<-s.seq(which.max(sample[[oven]][["T"]]>=invector[length(invector)]),
length(sample[[oven]][["T"]]))
a.tr<-sample[[oven]][["t"]][tr.end]
a.val<-sample[[oven]][[thermogram]][tr.end]
area.end<-RE_traparea(a.tr,a.val)
areas<-c(areas,area.end)
sum(areas)
sample$Zones_C
devtools::load_all()
devtools::load_all()
idee<-RE_customarea(test8,"Pyrolysis","CO2",c(200,300,450))
devtools::load_all()
idee<-RE_customarea(test8[1],"Pyrolysis","CO2",c(200,300,450))
sample<-test8$S_2501_0001.B00
oven<-"Pyrolysis"
sample[[oven]][["T"]]
devtools::load_all()
idee<-RE_customarea(test8[1],"Pyrolysis","CO2",c(200,300,450))
devtools::load_all()
idee<-RE_customarea(test8[1],"Pyrolysis","CO2",c(200,300,450))
View(idee)
devtools::load_all()
idee<-RE_customarea(test8[1],"Pyrolysis","CO2",c(200,300,450))
devtools::load_all()
idee<-RE_customarea(test8[1],"Pyrolysis","CO2",c(200,300,450))
View(idee)
idee<-RE_customarea(test8,"Pyrolysis","CO2",c(200,300,450))
devtools::document()
devtools::document()
rm(list=ls())
library(tidyverse)
devtools::load_all()
dataloc<-"D:/PhD/Rock-Eval/Maarten_2501 - Copy/BULK ROCK"
data<-RE_read(dataloc)
test<-RE_cursadjust(data)
RE_plot(test,3,"Pyrolysis","CO2")
RE_plot(test,10,"Pyrolysis","CO2")
test2<-RE_convert(test)
test3<-RE_surfaces(test2, time.inlude = TRUE)
test3<-RE_surfaces(test2)
devtools::load_all()
test3<-RE_surfaces(test2, time.include = TRUE)
test3<-RE_surfaces(test2, time.include = TRUE)
sample<-test2$S_2501_0001.B00
#1.1 take list to extend
list.extended<-list
#1.2 define safe sequence in case of NAs
s.seq<-function(x,y){
if (all(is.na(x))|all(is.na(y))) {NA} else {
seq(x,y,by=1)}
}
#2.1.1 Determine time ranges between Rock-Eval cursors
tr.s1<-s.seq(1,sample[["Cursors"]]["curs1.1"])
tr.s2<-s.seq(sample[["Cursors"]]["curs1.1"]+1,length(sample[["Pyrolysis"]][["t"]]))
tr.s3CO<-s.seq(1,sample[["Cursors"]]["curs2.2"])
tr.s3COi<-s.seq(sample[["Cursors"]]["curs2.2"]+1,length(sample[["Pyrolysis"]][["t"]]))
tr.s3CO2<-s.seq(1,sample[["Cursors"]]["curs3.2"])
tr.s3CO2i<-s.seq(sample[["Cursors"]]["curs3.2"]+1,length(sample[["Pyrolysis"]][["t"]]))
tr.s4CO<-s.seq(1,sample[["Cursors"]]["curs5.2"])
tr.s4COi<-s.seq(sample[["Cursors"]]["curs5.2"]+1,length(sample[["Oxidation"]][["t"]]))
tr.s4CO2<-s.seq(1,sample[["Cursors"]]["curs6.2"])
tr.s5<-s.seq(sample[["Cursors"]]["curs6.2"]+1,length(sample[["Oxidation"]][["t"]]))
#2.1.2 Compute the area between these cursors
S1<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s1],sample[["Pyrolysis"]][["CH"]][tr.s1])
S2<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s2],sample[["Pyrolysis"]][["CH"]][tr.s2])
S3CO<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s3CO],sample[["Pyrolysis"]][["CO"]][tr.s3CO])
S3COi<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s3COi],sample[["Pyrolysis"]][["CO"]][tr.s3COi])
S3CO2<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s3CO2],sample[["Pyrolysis"]][["CO2"]][tr.s3CO2])
S3CO2i<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s3CO2i],sample[["Pyrolysis"]][["CO2"]][tr.s3CO2i])
S4CO<-RE_traparea(sample[["Oxidation"]][["t"]][tr.s4CO],sample[["Oxidation"]][["CO"]][tr.s4CO])
S4COi<-RE_traparea(sample[["Oxidation"]][["t"]][tr.s4COi],sample[["Oxidation"]][["CO"]][tr.s4COi])
S4CO2<-RE_traparea(sample[["Oxidation"]][["t"]][tr.s4CO2],sample[["Oxidation"]][["CO2"]][tr.s4CO2])
S5<-RE_traparea(sample[["Oxidation"]][["t"]][tr.s5],sample[["Oxidation"]][["CO2"]][tr.s5])
#2.1.3 Return the values as an addition to the original list
zones<-c(S1=S1, S2=S2,
S3CO=S3CO, S3COi=S3COi, S3CO2=S3CO2, S3CO2i=S3CO2i,
S4CO=S4CO, S4COi=S4COi, S4CO2=S4CO2, S5=S5)
sample[["Zones_C"]]<-zones
#3.1 Take values as time series instead of areas
S1.t<-sample[["Pyrolysis"]][["CH"]][tr.s1]
S2.t<-sample[["Pyrolysis"]][["CH"]][tr.s2]
S3CO.t<-sample[["Pyrolysis"]][["CO"]][tr.s3CO]
S3COi.t<-sample[["Pyrolysis"]][["CO"]][tr.s3COi]
S3CO2.t<-sample[["Pyrolysis"]][["CO2"]][tr.s3CO2]
S3CO2i.t<-sample[["Pyrolysis"]][["CO2"]][tr.s3CO2i]
S4CO.t<-sample[["Oxidation"]][["CO"]][tr.s4CO]
S4COi.t<-sample[["Oxidation"]][["CO"]][tr.s4COi]
S4CO2.t<-sample[["Oxidation"]][["CO2"]][tr.s4CO2]
S5.t<-sample[["Oxidation"]][["CO2"]][tr.s5]
#3.2 Make time series continuous over entire time range
S1<-c(S1.t,S2.t*0)
S2<-c(S1.t*0,S2.t)
S3CO<-c(S3CO.t,S3COi.t/2)
S3COi<-c(S3CO.t*0,S3COi.t/2)
S3CO2<-c(S3CO2.t,S3CO2i.t*0)
S3CO2i<-c(S3CO2.t*0,S3CO2i.t)
S4CO<-c(S4CO.t,S4COi.t*0)
S4COi<-c(S4CO.t*0,S4COi.t)
S4CO2<-c(S4CO2.t,S5.t*0)
S5<-c(S4CO2.t*0,S5.t)
#3.3 Combine and return
values.P<-data.frame(S1=S1, S2=S2,
S3CO=S3CO, S3COi=S3COi,
S3CO2=S3CO2, S3CO2i=S3CO2i)
values.O<-data.frame(S4CO=S4CO, S4COi=S4COi,
S4CO2=S4CO2, S5=S5)
sample[["Pyrolysis"]]<-cbind(sample[["Pyrolysis"]],values.P)
sample[["Oxidation"]]<-cbind(sample[["Oxidation"]],values.O)
devtools::load_all()
test3<-RE_surfaces(test2, time.include = TRUE)
test4<-RE_metrics(test3)
test5<-RE_SebagIR(test4)
test6<-RE_Tpercentiles(test5)
test7<-RE_Ccombined(test6)
test8<-RE_OHcombined(test7)
idee<-RE_customarea(test8,"Pyrolysis","CO2",c(200,300,450))
View(idee)
View(data)
View(test8)
rm(list=ls())
library(tidyverse)
devtools::load_all()
dataloc<-"D:/PhD/Rock-Eval/Maarten_2501/BULK ROCK"
# Read
REdata<-RE_read(dataloc)
warnings()
# Fix cursors
REdata.adj<-RE_cursadjust(data)
# Fix cursors
REdata.adj<-RE_cursadjust(REdata)
View(REdata)
View(REdata)
# Remove incorrect data
REdata$S_2501_0018.B00
# Remove incorrect data
REdata$S_2501_0018.B00<-NULL
# Fix cursors
REdata.adj<-RE_cursadjust(REdata)
RE_plot(REdat[30])
RE_plot(REdata[30])
RE_plot(REdata[[30]])
RE_plot(REdata,30)
check<-RE_cursadjust(REdata[30],plot=T)
RE_plot(REdata,30)
View(check)
RE_plot(REdata.adj,30)
RE_plot(REdata.adj,41)
RE_plot(REdata.adj,44)
RE_plot(REdata.adj,45)
RE_plot(REdata.adj,56)
RE_plot(REdata.adj,63)
RE_plot(REdata.adj,84)
RE_plot(REdata.adj,104)
# Convert and calculate metrics
REdata.adj<-RE_convert(REdata.adj)
REdata.adj<-RE_surfaces(REdata.adj)
REdata.adj<-RE_SebagIR(REdata.adj)
dattable<-RE_extracttable(REdata.adj)
View(dattable)
write.csv(dattable,"out.csv")
# Fix cursors
REdata.adj<-RE_cursadjust(REdata)
RE_plot(REdata.adj,104)
# Convert and calculate metrics
REdata.adj<-RE_convert(REdata.adj)
REdata.adj<-RE_surfaces(REdata.adj)
REdata.adj<-RE_metrics(REdata.adj)
REdata.adj<-RE_SebagIR(REdata.adj)
dattable<-RE_extracttable(REdata.adj)
write.csv(dattable,"out.csv")
write.csv(dattable,"/DUMP/out.csv")
write.csv(dattable,"./DUMP/out.csv")
dattable<-RE_extracttable(REdata.adj)
View(dattable)
devtools::load_all()
dattable<-RE_extracttable(REdata.adj)
write.csv(dattable,"./DUMP/out.csv")
write.csv(dattable,"./DUMP/out.csv")
rm(list=ls())
library(readxl)
library(tidyverse)
# Read Excel (adjust sheet/path)
data <- read_excel("//WURNET.NL/Homes/hoef006/My Documents/- Data/MIXED SAMPLE DATA.xlsx", "Mix 23", "A1:A606", col_names = FALSE)
colnames(data)<-"main"
data<-data[!is.na(data$main),]
data$mix<-NA
int<- read_excel("//WURNET.NL/Homes/hoef006/My Documents/- Data/METADATA.xlsx", "Properties", col_names = TRUE)
int<-int[!is.na(int$CMNT),]
for (i in 1:nrow(data[str_detect(data$main,"Sample/ composition"),])) {
data$mix[str_detect(data$main,"Sample/ composition")][i]<-i}
for (i in 2:nrow(data)) {
if(is.na(data$mix[i])){
data$mix[i]<-data$mix[i-1]}
}
data.int<-data
data.int$main[data.int$main!="Sample/ composition"]<-
int$DID[match(
data.int$main[data.int$main!="Sample/ composition"],
int$SAMPLE)]
out<-data.frame(n=1:74,main=NA,comp=NA)
for (i in 1:max(data$mix)) {
cut<-data$main[data$mix==i]
out$main[i]<-cut[2]
out$comp[i]<-paste(cut[3:length(cut)], collapse="; ")
}
out.int<-data.frame(n=1:74,main=NA,comp=NA)
for (i in 1:max(data.int$mix)) {
cut<-data.int$main[data.int$mix==i]
out.int$main[i]<-cut[2]
out.int$comp[i]<-paste(cut[3:length(cut)], collapse="; ")
}
out.alt<-data.frame(n=1:74,main=NA,comp=NA)
for (i in 1:max(data.int$mix)) {
cut<-data.int$main[data.int$mix==i]
out.alt$main[i]<-cut[2]
out.alt$comp[i]<-list(cut[3:length(cut)])
}
out.alt<-out.alt %>% unnest_wider(comp, names_sep = ".")
out.alt$n<-NULL
out.alt$comment<-str_extract(out$main,"(?<=\\_).*")
out.alt$comment<-gsub("ME_","Hamburg ",out.alt$comment)
out.alt$comment<-gsub("HB_","Bremen ",out.alt$comment)
out.alt$comment<-gsub("GS_","Groningen ",out.alt$comment)
out.alt$comment<-gsub("RS_","Rostock ",out.alt$comment)
write.excel <- function(x,row.names=FALSE,col.names=TRUE,...) {
write.table(x,"clipboard",sep="\t",row.names=row.names,col.names=col.names,na = "",...)
}
write.excel(out.alt)
data <- read_excel("//WURNET.NL/Homes/hoef006/My Documents/- Data/MIXED SAMPLE DATA.xlsx", "Mix 24", "A1:A606", col_names = FALSE)
colnames(data)<-"main"
data<-data[!is.na(data$main),]
data$mix<-NA
int<- read_excel("//WURNET.NL/Homes/hoef006/My Documents/- Data/METADATA.xlsx", "Properties", col_names = TRUE)
int<-int[!is.na(int$CMNT),]
for (i in 1:nrow(data[str_detect(data$main,"Sample/ composition"),])) {
data$mix[str_detect(data$main,"Sample/ composition")][i]<-i}
for (i in 2:nrow(data)) {
if(is.na(data$mix[i])){
data$mix[i]<-data$mix[i-1]}
}
data.int<-data
data.int$main[data.int$main!="Sample/ composition"]<-
int$DID[match(
data.int$main[data.int$main!="Sample/ composition"],
int$SAMPLE)]
out<-data.frame(n=1:74,main=NA,comp=NA)
for (i in 1:max(data$mix)) {
cut<-data$main[data$mix==i]
out$main[i]<-cut[2]
out$comp[i]<-paste(cut[3:length(cut)], collapse="; ")
}
out.int<-data.frame(n=1:74,main=NA,comp=NA)
for (i in 1:max(data.int$mix)) {
cut<-data.int$main[data.int$mix==i]
out.int$main[i]<-cut[2]
out.int$comp[i]<-paste(cut[3:length(cut)], collapse="; ")
}
out.alt<-data.frame(n=1:74,main=NA,comp=NA)
for (i in 1:max(data.int$mix)) {
cut<-data.int$main[data.int$mix==i]
out.alt$main[i]<-cut[2]
out.alt$comp[i]<-list(cut[3:length(cut)])
}
out.alt<-out.alt %>% unnest_wider(comp, names_sep = ".")
out.alt$n<-NULL
out.alt$comment<-str_extract(out$main,"(?<=\\_).*")
out.alt$comment<-gsub("ME_","Hamburg ",out.alt$comment)
out.alt$comment<-gsub("HB_","Bremen ",out.alt$comment)
out.alt$comment<-gsub("GS_","Groningen ",out.alt$comment)
out.alt$comment<-gsub("RS_","Rostock ",out.alt$comment)
write.excel <- function(x,row.names=FALSE,col.names=TRUE,...) {
write.table(x,"clipboard",sep="\t",row.names=row.names,col.names=col.names,na = "",...)
}
write.excel(out.alt)
data <- read_excel("//WURNET.NL/Homes/hoef006/My Documents/- Data/MIXED SAMPLE DATA.xlsx", "Mix 25", "A1:A606", col_names = FALSE)
colnames(data)<-"main"
data<-data[!is.na(data$main),]
data$mix<-NA
int<- read_excel("//WURNET.NL/Homes/hoef006/My Documents/- Data/METADATA.xlsx", "Properties", col_names = TRUE)
int<-int[!is.na(int$CMNT),]
for (i in 1:nrow(data[str_detect(data$main,"Sample/ composition"),])) {
data$mix[str_detect(data$main,"Sample/ composition")][i]<-i}
for (i in 2:nrow(data)) {
if(is.na(data$mix[i])){
data$mix[i]<-data$mix[i-1]}
}
data.int<-data
data.int$main[data.int$main!="Sample/ composition"]<-
int$DID[match(
data.int$main[data.int$main!="Sample/ composition"],
int$SAMPLE)]
out<-data.frame(n=1:74,main=NA,comp=NA)
for (i in 1:max(data$mix)) {
cut<-data$main[data$mix==i]
out$main[i]<-cut[2]
out$comp[i]<-paste(cut[3:length(cut)], collapse="; ")
}
out.int<-data.frame(n=1:74,main=NA,comp=NA)
for (i in 1:max(data.int$mix)) {
cut<-data.int$main[data.int$mix==i]
out.int$main[i]<-cut[2]
out.int$comp[i]<-paste(cut[3:length(cut)], collapse="; ")
}
out.alt<-data.frame(n=1:74,main=NA,comp=NA)
for (i in 1:max(data.int$mix)) {
cut<-data.int$main[data.int$mix==i]
out.alt$main[i]<-cut[2]
out.alt$comp[i]<-list(cut[3:length(cut)])
}
out.alt<-out.alt %>% unnest_wider(comp, names_sep = ".")
out.alt$n<-NULL
out.alt$comment<-str_extract(out$main,"(?<=\\_).*")
out.alt$comment<-gsub("ME_","Hamburg ",out.alt$comment)
out.alt$comment<-gsub("HB_","Bremen ",out.alt$comment)
out.alt$comment<-gsub("GS_","Groningen ",out.alt$comment)
out.alt$comment<-gsub("RS_","Rostock ",out.alt$comment)
write.excel <- function(x,row.names=FALSE,col.names=TRUE,...) {
write.table(x,"clipboard",sep="\t",row.names=row.names,col.names=col.names,na = "",...)
}
write.excel(out.alt)
