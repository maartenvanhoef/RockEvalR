"Cu+2","Fe+3","K+","Mg+2","Mn+3","MoO4-2","NO3-","NH4+",
"Na+","Ni+2","PO4-3","Pb+2","SO4-2","SbO3-","Sn+4","Sr+2",
"Zn+2")
elements<-orderf(elements)
#ADDITIONAL COMPOUNDS
compounds_add<-c("SO4-2","Fe+2","Mn+2","Mn+4")
compounds_add<-orderf(compounds_add)
# Interpreter
int<-read.csv("colnames.csv",header=F)
int$V4<-paste0(int$V1,".tot")
el_in<-paste0(elements,".tot")
in_fo<-c("ID","soilmass","watervolume","pH", "pe",
"HA_solid","FA_solid","HA_solution","FA_solution",
"HFO_solid","CLAY_solid",
el_in,"CO2.gas")
write.table(t(in_fo),"clipboard",sep="\t",row.names=F, col.names = F, quote=F)
all_ele<-c(elements,compounds_add)
all_sur<-c(phases,surf)
out_for<-crossing(all_ele,all_sur)
out<-paste(out_for[[1]],out_for[[2]],sep=".")
write.table(t(out),"clipboard",sep="\t",row.names=F, col.names = F, quote=F)
#RUN CHUNKS ABOVE TO START QUICKLY#
#READ DATA FROM TOT AND SOLUTION SHEETS
tot<-read_excel("Model Input.xlsx","TOT","A2:AL999")
tot<-rename(tot, any_of(setNames(int$V2,int$V4)))
sol<-read_excel("Model Input.xlsx","SOLUTION","A2:AC999")
sol<-rename(sol, any_of(setNames(int$V2,int$V4)))
#SELECT DATA AND SET 0-VALUES TO 1E-11
tot<-tot[tot$ID %in% selectID,]
sol<-sol[sol$ID %in% selectID,]
tot[tot<=0]<-1E-11
sol[sol<=0]<-1E-11
#FORMAT INPUT DATA
input<-as.data.frame(setNames(data.frame(matrix(ncol = length(in_fo), nrow = nrow(tot))), in_fo))
input[,col_match(tot,input)]<-tot[,col_in(tot,input)]
input$ID<-input$ID/1000+tottype #Change tottype for different total approach
#SET WORKING DIRECTORY MAIN FOLDER
dir.create(file.path(folder,paste0(tottype,".tot")), showWarnings = FALSE)
#WRITE INPUT FILE TO ASSOCIATED FOLDER
write.table(input, file=paste0(folder,"/",tottype,".tot","/input.dat"),sep=" ",
quote=F,row.names=F)
#OPTIONAL: COPY SUPPORTING FILES TO EACH FOLDER
files<-list.files(paste0(folder,"/000000 files"), full.names=T)
file.copy(files, paste0(folder,"/",tottype,".tot"), overwrite=F)
supfiles<-list.files(paste0(folder,"/000001 supfiles"), full.names=T)
file.copy(supfiles, paste0(folder,"/",tottype,".tot"), overwrite=F)
rm(files,supfiles)
#CREATE ORCHESTRA INPUT FILE FROM DATA FILES
input<-as.data.frame(setNames(data.frame(matrix(ncol = length(in_fo), nrow = nrow(tot))), in_fo))
input[,col_match(tot,input)]<-tot[,col_in(tot,input)]
input$ID<-input$ID/1000+1
input<-list(input)
inputS<-as.data.frame(setNames(data.frame(matrix(ncol = length(in_fo), nrow = nrow(tot))), in_fo))
inputS[,col_match(sol,inputS)]<-sol[,col_in(sol,inputS)]
#INPUT FOR STABLE CALCULATION IN ORCHESTRA BEFORE EACH MAJOR CHANGE
stnd<-input[[1]][5,]
stnd[,el_in]<-inputS[5,el_in]
stnd$ID<-0.001
#HAVE ONE ELEMENT AS TOTAL PER TIME WITH THE OTHERS IN SOLUTION
for (i in 1:length(el_in)) {
input_add<-input[[1]]
input_add[,el_in[-i]]<-inputS[,el_in[-i]]
input_add$ID<-input_add$ID+3
input_add<-rbind(stnd,input_add)
colnames(input_add)[colnames(input_add) %in% el_in[-i]]<-gsub(
".tot",".solution",colnames(input_add[el_in[-i]]))
input_add<-input_add[,colSums(is.na(input_add))<nrow(input_add)]
input_add[is.na(input_add)]<-1E-11
input[[1+i]]<-input_add
}
rm(input_add)
names(input)<-c("tot",el_in)
#SET WORKING DIRECTORY MAIN FOLDER
folder<-paste0("//WURNET.NL/Homes/hoef006/My Documents/- Modellen/ORCHESTRA/",modelname)
#WRITE EACH INPUT FILE TO ASSOCIATED FOLDER
for (i in 1:length(el_in)) {
write.table(input[[i+1]], file=paste0(folder,"/",el_in[i],"/input.dat"),sep=" ",
quote=F,row.names=F)
}
#READ OUTPUT FOLDERS AND TAKE THE OUTPUT.DAT FILES INTO A LIST
outfolders<-list.dirs(folder,full.names = T, recursive = F)
output<-list()
for (i in 3:length(outfolders)) {
out_name<-sub(paste0(folder,"/"),"",outfolders[i])
output_i<-read.delim(paste0(outfolders[i],"/output.dat"), header = T, skip = 1, check.names = F)
output[[out_name]]<-output_i
}
rm(output_i)
#TAKE WHICH FOLDERS SHOULD BE USED FROM THE MODEL OUTPUTS
mergefolders<-read.table(paste0(folder,"/selectfolders.txt"), header=T)
#CREATE ONE MERGED OUTPUT TABLE
output_merged<-output[[2]]
output_merged<-output_merged[output_merged$ID>=1,c(1:5)]
for (i in 1:nrow(mergefolders)) {
folder_i<-mergefolders$Direction[i]
output_i<-output[[folder_i]]
output_i<-output_i[output_i$ID>=1,]
element_i<-sub("tot","",str_extract(mergefolders$Direction[i],".*\\.tot"))
output_i_cut<-output_i[,str_detect(colnames(output_i),fixed(element_i))]
output_merged<-cbind(output_merged,output_i_cut)
}
rm(folder_i,output_i,element_i,output_i_cut)
#CONVERT mol/l tot mg/kg
#wip
#EXPORT CSV FILE OF MERGED OUTPUT TABLE
write.csv(output_merged, file=paste0(
libraryfolder,"/",
modelname, " - ", gsub(":","", Sys.Date()),".csv"),
row.names=F)
rm(list = ls())
setwd("//WURNET.NL/Homes/hoef006/My Documents/- Scripts/Model en gevoeligheid/Orchestra")
library(tidyverse)
library(readxl)
orderf<-function(x)(factor(x, levels = unique(x)))
col_match<-function(x,y)(match(colnames(x),colnames(y))[!is.na(match(colnames(x),colnames(y)))])
col_in<-function(x,y)(colnames(x) %in% colnames(y))
#GIVE THE IDs OF THE SAMPLES THAT NEED TO BE INCLUDED
selectID<-c(1:9)  #EDIT
#GIVE THE NAME OF THE MODEL (FOLDER NAME)
modelname<-"241025 Gd pH-stat 230524_ME_M.1-6"   #EDIT
#GIVE THE TYPE (1-3) FOR TOTAL CONCENTRATIONS
tottype<-1
#### NO NEED TO EDIT ####
# Give message
paste0("ID ",list(selectID)," will be used for ",modelname)
# Set model folder
folder<-paste0("//WURNET.NL/Homes/hoef006/My Documents/- Modellen/ORCHESTRA/",modelname)
# Set library folder
libraryfolder<-"//WURNET.NL/Homes/hoef006/My Documents/- Modellen/ORCHESTRA/000002 Output CSV"
#PHASES AND SURFACES
phases<-c("con","diss","solution","min","solid","liter","tot")
phases<-orderf(phases)
surf<-c("SOM","SHA","SFA","DOM","DHA","DFA","SURF","SHFO","SCLAY")
surf<-orderf(surf)
#PRIMARY ENTITIES
elements<-c("Al+3","AsO4-3","Ba+2","CO3-2","Ca+2","Cd+2","Cl-","Co+3","Cr+3",
"Cu+2","Fe+3","K+","Mg+2","Mn+3","MoO4-2","NO3-","NH4+",
"Na+","Ni+2","PO4-3","Pb+2","SO4-2","SbO3-","Sn+4","Sr+2",
"Zn+2")
elements<-orderf(elements)
#ADDITIONAL COMPOUNDS
compounds_add<-c("SO4-2","Fe+2","Mn+2","Mn+4")
compounds_add<-orderf(compounds_add)
# Interpreter
int<-read.csv("colnames.csv",header=F)
int$V4<-paste0(int$V1,".tot")
el_in<-paste0(elements,".tot")
in_fo<-c("ID","soilmass","watervolume","pH", "pe",
"HA_solid","FA_solid","HA_solution","FA_solution",
"HFO_solid","CLAY_solid",
el_in,"CO2.gas")
write.table(t(in_fo),"clipboard",sep="\t",row.names=F, col.names = F, quote=F)
all_ele<-c(elements,compounds_add)
all_sur<-c(phases,surf)
out_for<-crossing(all_ele,all_sur)
out<-paste(out_for[[1]],out_for[[2]],sep=".")
write.table(t(out),"clipboard",sep="\t",row.names=F, col.names = F, quote=F)
#READ DATA FROM TOT AND SOLUTION SHEETS
tot<-read_excel("Model Input.xlsx","TOT","A2:AL999")
tot<-rename(tot, any_of(setNames(int$V2,int$V4)))
sol<-read_excel("Model Input.xlsx","SOLUTION","A2:AC999")
sol<-rename(sol, any_of(setNames(int$V2,int$V4)))
#SELECT DATA AND SET 0-VALUES TO 1E-11
tot<-tot[tot$ID %in% selectID,]
sol<-sol[sol$ID %in% selectID,]
tot[tot<=0]<-1E-11
sol[sol<=0]<-1E-11
#FORMAT INPUT DATA
input<-as.data.frame(setNames(data.frame(matrix(ncol = length(in_fo), nrow = nrow(tot))), in_fo))
input[,col_match(tot,input)]<-tot[,col_in(tot,input)]
input$ID<-input$ID/1000+tottype #Change tottype for different total approach
#SET WORKING DIRECTORY MAIN FOLDER
dir.create(file.path(folder,paste0(tottype,".tot")), showWarnings = FALSE)
#WRITE INPUT FILE TO ASSOCIATED FOLDER
write.table(input, file=paste0(folder,"/",tottype,".tot","/input.dat"),sep=" ",
quote=F,row.names=F)
#OPTIONAL: COPY SUPPORTING FILES TO EACH FOLDER
files<-list.files(paste0(folder,"/000000 files"), full.names=T)
file.copy(files, paste0(folder,"/",tottype,".tot"), overwrite=F)
supfiles<-list.files(paste0(folder,"/000001 supfiles"), full.names=T)
file.copy(supfiles, paste0(folder,"/",tottype,".tot"), overwrite=F)
rm(files,supfiles)
#CREATE ORCHESTRA INPUT FILE FROM DATA FILES
input<-as.data.frame(setNames(data.frame(matrix(ncol = length(in_fo), nrow = nrow(tot))), in_fo))
input[,col_match(tot,input)]<-tot[,col_in(tot,input)]
input$ID<-input$ID/1000+1
input<-list(input)
inputS<-as.data.frame(setNames(data.frame(matrix(ncol = length(in_fo), nrow = nrow(tot))), in_fo))
inputS[,col_match(sol,inputS)]<-sol[,col_in(sol,inputS)]
#INPUT FOR STABLE CALCULATION IN ORCHESTRA BEFORE EACH MAJOR CHANGE
stnd<-input[[1]][5,]
stnd[,el_in]<-inputS[5,el_in]
stnd$ID<-0.001
#HAVE ONE ELEMENT AS TOTAL PER TIME WITH THE OTHERS IN SOLUTION
for (i in 1:length(el_in)) {
input_add<-input[[1]]
input_add[,el_in[-i]]<-inputS[,el_in[-i]]
input_add$ID<-input_add$ID+3
input_add<-rbind(stnd,input_add)
colnames(input_add)[colnames(input_add) %in% el_in[-i]]<-gsub(
".tot",".solution",colnames(input_add[el_in[-i]]))
input_add<-input_add[,colSums(is.na(input_add))<nrow(input_add)]
input_add[is.na(input_add)]<-1E-11
input[[1+i]]<-input_add
}
rm(input_add)
names(input)<-c("tot",el_in)
#SET WORKING DIRECTORY MAIN FOLDER
folder<-paste0("//WURNET.NL/Homes/hoef006/My Documents/- Modellen/ORCHESTRA/",modelname)
#WRITE EACH INPUT FILE TO ASSOCIATED FOLDER
for (i in 1:length(el_in)) {
write.table(input[[i+1]], file=paste0(folder,"/",el_in[i],"/input.dat"),sep=" ",
quote=F,row.names=F)
}
#READ OUTPUT FOLDERS AND TAKE THE OUTPUT.DAT FILES INTO A LIST
outfolders<-list.dirs(folder,full.names = T, recursive = F)
output<-list()
for (i in 3:length(outfolders)) {
out_name<-sub(paste0(folder,"/"),"",outfolders[i])
output_i<-read.delim(paste0(outfolders[i],"/output.dat"), header = T, skip = 1, check.names = F)
output[[out_name]]<-output_i
}
rm(output_i)
#TAKE WHICH FOLDERS SHOULD BE USED FROM THE MODEL OUTPUTS
mergefolders<-read.table(paste0(folder,"/selectfolders.txt"), header=T)
#CREATE ONE MERGED OUTPUT TABLE
output_merged<-output[[2]]
output_merged<-output_merged[output_merged$ID>=1,c(1:5)]
for (i in 1:nrow(mergefolders)) {
folder_i<-mergefolders$Direction[i]
output_i<-output[[folder_i]]
output_i<-output_i[output_i$ID>=1,]
element_i<-sub("tot","",str_extract(mergefolders$Direction[i],".*\\.tot"))
output_i_cut<-output_i[,str_detect(colnames(output_i),fixed(element_i))]
output_merged<-cbind(output_merged,output_i_cut)
}
rm(folder_i,output_i,element_i,output_i_cut)
#CONVERT mol/l tot mg/kg
#wip
#EXPORT CSV FILE OF MERGED OUTPUT TABLE
write.csv(output_merged, file=paste0(
libraryfolder,"/",
modelname, " - ", gsub(":","", Sys.Date()),".csv"),
row.names=F)
#NAMES OF (FOLDER AND) FILES TO BE READ
libraryfiles<-list.files(libraryfolder)
libraryread<-c(1:length(libraryfiles))
libraryfiles
rm(list = ls())
setwd("//WURNET.NL/Homes/hoef006/My Documents/- Scripts/Model en gevoeligheid/Orchestra")
library(tidyverse)
library(readxl)
orderf<-function(x)(factor(x, levels = unique(x)))
col_match<-function(x,y)(match(colnames(x),colnames(y))[!is.na(match(colnames(x),colnames(y)))])
col_in<-function(x,y)(colnames(x) %in% colnames(y))
#GIVE THE IDs OF THE SAMPLES THAT NEED TO BE INCLUDED
selectID<-c(1:9)  #EDIT
#GIVE THE NAME OF THE MODEL (FOLDER NAME)
modelname<-"241025 Gd pH-stat 230524_ME_M.1-6"   #EDIT
#GIVE THE TYPE (1-3) FOR TOTAL CONCENTRATIONS
tottype<-1
#### NO NEED TO EDIT ####
# Give message
paste0("ID ",list(selectID)," will be used for ",modelname)
# Set model folder
folder<-paste0("//WURNET.NL/Homes/hoef006/My Documents/- Modellen/ORCHESTRA/",modelname)
# Set library folder
libraryfolder<-"//WURNET.NL/Homes/hoef006/My Documents/- Modellen/ORCHESTRA/000002 Output CSV"
#NAMES OF (FOLDER AND) FILES TO BE READ
libraryfiles<-list.files(libraryfolder)
libraryread<-c(1:length(libraryfiles))
libraryfiles
libraryread<-libraryfiles[str_detect("2025")] #Can be changed
str_detect(libraryfiles,"2025")
libraryread<-str_detect(libraryfiles,"2025")
#
print(paste("Reading files",list(libraryread),"from the folder."))
libraryread<-str_detect(libraryfiles,"2025",negate = T)
libraryread
libraryread<-str_detect(libraryfiles,"2025")
libraryread<-which(str_detect(libraryfiles,"2025"))
#
print(paste("Reading files",list(libraryread),"from the folder."))
#CHOOSE AN OPTION (OR EDIT)
libraryread<-c(1:length(libraryfiles))
#
print(paste("Reading files",list(libraryread),"from the folder."))
#CHOOSE AN OPTION (OR EDIT)
libraryread<-c(1:length(libraryfiles))
libraryread<-c(1,9,12)
libraryread<-c(which(str_detect(libraryfiles,"2025")))
#READ ALL SELECTED CSV FILES INTO ONE LIST
readcsv<-lapply(paste0(libraryfolder,"/",libraryfiles),read.csv,check.names=F)[libraryread]
#Change mol/l to mol/kg (SSR)
f1<-function(x) data.frame(x[1:5],x[,6:ncol(x)]/x[,4], check.names = F)
converted<-lapply(readcsv,f1)
#Change mol/kg to mg/kg (Molar Mass)
f2<-function(x,y) data.frame(x[1:5],(mapply('*',
x[,6:ncol(x)],1000*y[match(sub("\\.","",str_extract(colnames(x)[6:ncol(x)],".*\\.")),y[,1]),3])), check.names = F)
converted<-lapply(converted,f2,int)
# Interpreter
int<-read.csv("colnames.csv",header=F)
int$V4<-paste0(int$V1,".tot")
#Change mol/kg to mg/kg (Molar Mass)
f2<-function(x,y) data.frame(x[1:5],(mapply('*',
x[,6:ncol(x)],1000*y[match(sub("\\.","",str_extract(colnames(x)[6:ncol(x)],".*\\.")),y[,1]),3])), check.names = F)
converted<-lapply(converted,f2,int)
#Row bind all files together
appended<-bind_rows(converted, .id="Model")
#Create new csv file (appended)
write.csv(appended, paste0(libraryfolder,"/",gsub("-","",sub("202","2",Sys.Date()))," Models appended.csv"))
###
setwd("D:/RockEvalR/RockEvalR")
devtools::document()
devtools::load_all()
read_RE("D:/PhD/Rock-Eval/Maarten_2501/BULK ROCK")
library("RockEvalR")
library(tidyverse)
read_RE("D:/PhD/Rock-Eval/Maarten_2501/BULK ROCK")
View(appended)
rm(list=ls())
library(tidyverse)
devtools::load_all()
read_RE("D:/PhD/Rock-Eval/Maarten_2501/BULK ROCK")
devtools::load_all()
RE<-read_RE("D:/PhD/Rock-Eval/Maarten_2501/BULK ROCK")
View(RE)
View(RE)
RE$IFP_160_0001.B00
summary(RE$IFP_160_0001.B00)
class(RE$IFP_160_0001.B00)
View(RE)
RE<-read_RE("D:/PhD/Rock-Eval/Maarten_2501/BULK ROCK")
class(RE[2])
class(RE[[2]])
#2.2.1 read files
file.i<-readLines(paste0(dataloc,"/",files[i]))
dataloc<-"D:/PhD/Rock-Eval/Maarten_2501/BULK ROCK"
#1.1 list all files in data location
files<-list.files(dataloc)
#1.2 only take files with the right extension and exclude raw data back-up
files<-files[stringr::str_detect(files,".B00")]
files<-files[!stringr::str_detect(files,"~")]
#2.1 create empty list for all data to be collected into
file.list<-list()
i<-25
#2.2.1 read files
file.i<-readLines(paste0(dataloc,"/",files[i]))
str_detect(file.i,"Geoworks")
which(str_detect(file.i,"Geoworks"))
"Geoworks" %in% file.i
which(str_detect(file.i,"Geoworks"))>1
any(str_detect(file.i,"Geoworks"))
#2.2.1 read files
file.i<-readLines(paste0(dataloc,"/",files[i]))
#2.2.3 description of the lines to cut
file.i.rp1<-which(str_detect(file.i,"Curves Pyro"))+1 #row pyro start
file.i.rp2<-which(str_detect(file.i,"Curves Oxi"))-1 #row pyro end
file.i.ro1<-which(str_detect(file.i,"Curves Oxi"))+1 #row pyro start
file.i.ro2<-length(file.i) #row pyro end
#2.2.4 cut pyro part
file.isp<-file.i[c(file.i.rp1:file.i.rp2)]
file.isp<-file.isp[file.isp!=""]
table.isp<-read.table(textConnection(file.isp))
colnames(table.isp)<-c("t","T","CH","CO","CO2","SO2")
#2.2.5 cut oxi part
file.iso<-file.i[c(file.i.ro1:file.i.ro2)]
file.iso<-file.iso[file.iso!=""]
table.iso<-read.table(textConnection(file.iso))
colnames(table.iso)<-c("t","T","CO","CO2","SO2")
#2.2.6 combine pyro and oxi
table.is<-bind_rows(list(Pyro=table.isp,Oxi=table.iso), .id="Oven")
file.list[[i]]<-table.is
file.list[[i]]<-2
View(file.list)
#2.1 create empty list for all data to be collected into
file.list<-list()
#2.2.1 read files
file.i<-readLines(paste0(dataloc,"/",files[i]))
file.list[[i]]<-table.is
View(file.list)
file.list[i]$Curves<-table.is
View(file.list)
file.list[i]$Thermogram<-table.is
View(file.list)
file.list[[i]]<-table.is
test<-file.list[[25]]
View(test)
file.list[[i]]<-list(Pyro=table.isp,Oxi=table.iso)
View(file.list)
test<-file.list[[25]]$Pyro
View(test)
View(file.list)
View(test)
#2.2.7 description of the lines to cut
file.i.rc1<-which(str_detect(file.i,"Curs manu_1")) #row Curs start
file.i.rc2<-which(str_detect(file.i,"Curs manu_1"))+50 #row Curs end
file.i.rc2<-which(str_detect(file.i,"Curs manu_1"))+49 #row Curs end
rcv<-c(2:7)
test<-file.i.rc1+rcv
test<-rcv+file.i.rc1
test<-rcv+file.i.rc1-1
rcv<-c(2:8,11:15)
test<-rcv+file.i.rc1-1
test
rcv<-c(2:8,11:14,17:20)
test<-rcv+file.i.rc1-1
test
file.i.rc2<-which(str_detect(file.i,"Calibration:Geoworks"))-2 #row Curs end
rcv<-c(2:8,11:14,17:20,23:26,29:33)
test<-rcv+file.i.rc1-1
test
rcv<-c(2:8,11:14,17:20,23:26,29:34)
test<-rcv+file.i.rc1-1
test
rcv<-c(2:8,11:14,17:20,23:26,30:34)
test<-rcv+file.i.rc1-1
test
rcv<-c(2:8,11:14,17:20,24:27,30:34)
test<-rcv+file.i.rc1-1
test
rcv<-c(2:8,11:14,17:20,23:27,30:34)
test<-rcv+file.i.rc1-1
test
rcv<-c(2:8,11:14,17:20,23:27,30:34,37:42,45:49)
test<-rcv+file.i.rc1-1
test
rcv<-c(2:8,11:14,17:20,23:27,30:34,37:42,45:50)
test<-rcv+file.i.rc1-1
test
file.i[test]
file.i.curs<-file.i[file.i.rc1:file.i.rc2]
file.i.curs
file.i.curs<-file.i.curs[rcv]
file.i.curs
str_extract(file.i.curs,"(?<=\\=)*")
str_extract(file.i.curs,"(?<=\=)*")
str_extract(file.i.curs,"(?<==)*")
str_extract(file.i.curs,"(?<==).*")
file.i.curs<-str_extract(file.i.curs[rcv],"(?<==).*")
file.i.curs<-file.i[file.i.rc1:200]
file.i.curs<-str_extract(file.i.curs[rcv],"(?<==).*")
file.i.curs
file.i.curs<-file.i[file.i.rc1:file.i.rc2]
rcv<-c(2:8,11:14,17:20,23:27,30:34,37:42,45:50)
file.i.curs<-str_extract(file.i.curs[rcv],"(?<==).*")
names(file.i.curs)<-"a"
file.i.curs
names(file.i.curs)<-c("c1.1","c1.2","c1.3","c1.4","c1.5","c1.6","b1")
file.i.curs
#' Load Rock-Eval data files
#'
#' This function loads all Rock-Eval raw data files into a list.
#'
#' @param dataloc Path to the input file
#' @return A list of the files in dataloc.
#' @export
read_RE <- function(dataloc){
#1.1 list all files in data location
files<-list.files(dataloc)
#1.2 only take files with the right extension and exclude raw data back-up
files<-files[stringr::str_detect(files,".B00")]
files<-files[!stringr::str_detect(files,"~")]
#2.1 create empty list for all data to be collected into
file.list<-list()
#2.2 for loop that reads the relevant data from the files into lists one by one
for (i in 1:length(files)) {
#2.2.1 read files
file.i<-readLines(paste0(dataloc,"/",files[i]))
#2.2.2 check if data is of the right type
if (length(file.i)>1) {
#2.2.3 description of the lines to cut
file.i.rp1<-which(str_detect(file.i,"Curves Pyro"))+1 #row pyro start
file.i.rp2<-which(str_detect(file.i,"Curves Oxi"))-1 #row pyro end
file.i.ro1<-which(str_detect(file.i,"Curves Oxi"))+1 #row pyro start
file.i.ro2<-length(file.i) #row pyro end
#2.2.4 cut pyro part
file.isp<-file.i[c(file.i.rp1:file.i.rp2)]
file.isp<-file.isp[file.isp!=""]
table.isp<-read.table(textConnection(file.isp))
colnames(table.isp)<-c("t","T","CH","CO","CO2","SO2")
#2.2.5 cut oxi part
file.iso<-file.i[c(file.i.ro1:file.i.ro2)]
file.iso<-file.iso[file.iso!=""]
table.iso<-read.table(textConnection(file.iso))
colnames(table.iso)<-c("t","T","CO","CO2","SO2")
#2.2.6 check for Geoworks derived cursors and calibration info
if (any(str_detect(file.i,"Geoworks"))){
#2.2.7 description of the lines to cut
file.i.rc1<-which(str_detect(file.i,"Curs manu_1")) #row Curs start
file.i.rc2<-which(str_detect(file.i,"Calibration:Geoworks"))-2 #row Curs end
file.i.curs<-file.i[file.i.rc1:file.i.rc2]
rcv<-c(2:8,11:14,17:20,23:27,30:34,37:42,45:50) #rows with actual data
file.i.curs<-str_extract(file.i.curs[rcv],"(?<==).*")
names(file.i.curs)<-c("c1.1","c1.2","c1.3","c1.4","c1.5","c1.6","b1")
}
#2.2.6 escape when file has not been through Geoworks
else{
#2.2.8 combine pyro and oxi in list
file.list[[i]]<-list(Pyro=table.isp,Oxi=table.iso)
warning("No Geoworks cursors or calibration found.")
}
}
#2.2.2 escape when data is incorrect
else{
file.list[[i]]<-"INCORRECT DATA ERROR"
warning("Incorrect data found in one of the files!")
}
}
names(file.list)<-files
file.list
}
