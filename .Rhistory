if (all(is.na(x))|all(is.na(y))) {NA} else {
seq(x,y,by=1)}
}
t.T4<-s.seq(which.max(sample[["Pyrolysis"]]["T"] >= 460),
length(sample[["Pyrolysis"]][["T"]]),1)
t.T4<-s.seq(which.max(sample[["Pyrolysis"]]["T"] >= 460),
length(sample[["Pyrolysis"]][["T"]]))
T3
t.T3
t.T4
#2.1.1 Determine time ranges for the areas S2, A1, A2, A3, A4
tr.T1<-which(sample[["Pyrolysis"]]["T"] >= 200 &
sample[["Pyrolysis"]]["T"] <= 340 &
sample[["Pyrolysis"]]["t"] >= sample[["Cursors"]]["curs1.1"])
tr.T2<-which(sample[["Pyrolysis"]]["T"] >= 340 &
sample[["Pyrolysis"]]["T"] <= 400)
tr.T3<-which(sample[["Pyrolysis"]]["T"] >= 400 &
sample[["Pyrolysis"]]["T"] <= 460 &
sample[["Pyrolysis"]]["t"] <= sample[["Cursors"]]["curs1.5"])
tr.T4<-s.seq(which.max(sample[["Pyrolysis"]]["T"] >= 460),
length(sample[["Pyrolysis"]][["T"]]))
tr.R <-s.seq(which.max(sample[["Pyrolysis"]]["T"] >= 400),length(sample[["Pyrolysis"]][["t"]]))
tr.s2<-s.seq(sample[["Cursors"]]["curs1.1"],length(sample[["Pyrolysis"]][["t"]]))
devtools::document()
rm(list=ls())
library(tidyverse)
devtools::load_all()
dataloc<-"D:/PhD/Rock-Eval/Maarten_2501 - Copy/BULK ROCK"
test<-RE_read(dataloc)
RE_plot(test,1,"Pyrolysis","CH")
test2<-RE_convert(test)
test3<-RE_surfaces(test2)
test4<-RE_metrics(test3)
test5<-RE_SebagIR(test4)
View(test5)
vector<-c(25,50,75)
#1.2 determine the T's based on the vector
names.T<-paste0("T",vector)
#1.3 function to be apply variable number of T's to list
T.func<-function(vector){
value.v<-c()
for (i in 1:length(vector)) {
value.v[i]<-vector[i]
}
names(value.v)<-names.T
value.v
}
T.func(vector)
#1.2 determine the T's based on the vector
zones<-c("S1","S2","S3","S4","S5")
#1.2 name of zones and the T's based on the input vector
zones<-c("S2","S3CO","S3CO2","S4CO","S4CO2")
?cumsum()
#' Cumulative trapezoidal integration
#'
#' This function does a step wise trapezoidal integration.
#'
#' @param x Independent variable for integral (e.g. time)
#' @param y Dependent variable of same length as x
#' @return Trapezoidal area under time series data
#' @export
RE_cumtraparea<-function(x,y){
# Area is calculated manually (alternatives did not perform better).
#1.1 Determine time steps
dx<-diff(x)
#1.2 Determine mean values between each step
my<-(head(y, -1) + tail(y, -1)) / 2
#1.3 Integral is approximated by the sum of (y_n + y_n+1)/2 x dx
area<-cumsum(my*dx)
area
}
rm(list=ls())
library(tidyverse)
devtools::load_all()
dataloc<-"D:/PhD/Rock-Eval/Maarten_2501 - Copy/BULK ROCK"
test<-RE_read(dataloc)
test2<-RE_convert(test)
test3<-RE_surfaces(test2)
test4<-RE_metrics(test3)
test5<-RE_SebagIR(test4)
#1.2 name of zones and the T's based on the input vector
zones<-c("S2","S3CO","S3CO2","S4CO","S4CO2")
vector<-c("25,50,75")
names.T<-paste0("T",vector)
sample<-test5[[1]]
check<-RE_cumtraparea(sample$Pyrolysis$t,sample$Pyrolysis$CO)
plot(check)
###
check<-RE_cumtraparea(sample$Pyrolysis$t,sample$Pyrolysis$CO)/
RE_traparea(sample$Pyrolysis$t,sample$Pyrolysis$CO)
plot(check)
names.T<-paste0(zones,"_T",vector)
names.T
names.T<-paste0("_T",vector)
names.T<-paste0(zones,paste0("_T",vector))
names.T<-paste0(rep(zones, each=length(vector)),"_T",vector)
rep(zones, each=length(vector))
rep(zones, each=3)
length(vector)
vector<-c(25,50,75)
names.T<-paste0(zones,"_T",vector)
names.T<-paste0(rep(zones, each=length(vector)),"_T",vector)
names.T
#2.1.1 Determine time ranges between Rock-Eval cursors
tr.s2<-s.seq(sample[["Cursors"]]["curs1.1"],length(sample[["Pyrolysis"]][["t"]]))
#1.3 define safe sequence in case of NAs
s.seq<-function(x,y){
if (all(is.na(x))|all(is.na(y))) {NA} else {
seq(x,y,by=1)}
}
#2.1.1 Determine time ranges between Rock-Eval cursors
tr.s2<-s.seq(sample[["Cursors"]]["curs1.1"],length(sample[["Pyrolysis"]][["t"]]))
tr.s3CO<-s.seq(min(sample[["Pyrolysis"]]["t"]),sample[["Cursors"]]["curs2.2"])
tr.s3CO2<-s.seq(min(sample[["Pyrolysis"]]["t"]),sample[["Cursors"]]["curs3.2"])
tr.s4CO<-s.seq(min(sample[["Oxidation"]]["t"]),sample[["Cursors"]]["curs5.2"])
tr.s4CO2<-s.seq(min(sample[["Oxidation"]]["t"]),sample[["Cursors"]]["curs6.2"])
#2.1.2 Compute the area between these cursors
S2<-RE_cumtraparea(sample[["Pyrolysis"]][["t"]][tr.s2],sample[["Pyrolysis"]][["CH"]][tr.s2])
S3CO<-RE_cumtraparea(sample[["Pyrolysis"]][["t"]][tr.s3CO],sample[["Pyrolysis"]][["CO"]][tr.s3CO])
S3CO2<-RE_cumtraparea(sample[["Pyrolysis"]][["t"]][tr.s3CO2],sample[["Pyrolysis"]][["CO2"]][tr.s3CO2])
S4CO<-RE_traparea(sample[["Oxidation"]][["t"]][tr.s4CO],sample[["Oxidation"]][["CO"]][tr.s4CO])
S4CO2<-RE_traparea(sample[["Oxidation"]][["t"]][tr.s4CO2],sample[["Oxidation"]][["CO2"]][tr.s4CO2])
i<-1
ts.S2.i<-which.max(S2.c>=S2/T.i)
#2.1.2 Compute the area between these cursors
S2<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s2],sample[["Pyrolysis"]][["CH"]][tr.s2])
S2.c<-RE_cumtraparea(sample[["Pyrolysis"]][["t"]][tr.s2],sample[["Pyrolysis"]][["CH"]][tr.s2])
S3CO<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s3CO],sample[["Pyrolysis"]][["CO"]][tr.s3CO])
S3CO.c<-RE_cumtraparea(sample[["Pyrolysis"]][["t"]][tr.s3CO],sample[["Pyrolysis"]][["CO"]][tr.s3CO])
S3CO2<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s3CO2],sample[["Pyrolysis"]][["CO2"]][tr.s3CO2])
S3CO2.c<-RE_cumtraparea(sample[["Pyrolysis"]][["t"]][tr.s3CO2],sample[["Pyrolysis"]][["CO2"]][tr.s3CO2])
S4CO<-RE_traparea(sample[["Oxidation"]][["t"]][tr.s4CO],sample[["Oxidation"]][["CO"]][tr.s4CO])
S4CO.c<-RE_cumtraparea(sample[["Oxidation"]][["t"]][tr.s4CO],sample[["Oxidation"]][["CO"]][tr.s4CO])
S4CO2<-RE_traparea(sample[["Oxidation"]][["t"]][tr.s4CO2],sample[["Oxidation"]][["CO2"]][tr.s4CO2])
S4CO2.c<-RE_cumtraparea(sample[["Oxidation"]][["t"]][tr.s4CO2],sample[["Oxidation"]][["CO2"]][tr.s4CO2])
ts.S2.i<-which.max(S2.c>=S2/T.i)
# 2.2.1 determine time step at which each percentile is reached
T.i<-vector[i]
ts.S2.i<-which.max(S2.c>=S2/T.i)
sample[["Cursors"]]["curs1.1"]+250
plot(S2.C,type="l")
S2.c
plot(S2.c,type="l")
abline(h=S2*0.25)
abline(v=430)
ts.S2.i<-which.max(S2.c>=S2*T.i)
ts.S2.i<-which.max(S2.c>=S2*T.i/100)
plot(S2.c,type="l")
abline(h=S2*0.25)
abline(v=399)
ts.S2.i<-which.max(S2.c>=S2*T.i/100)
ts.S3CO.i<-which.max(S3CO.c>=S3CO*T.i/100)
ts.S3CO2.i<-which.max(S3CO2.c>=S3CO2*T.i/100)
ts.S4CO.i<-which.max(S4CO.c>=S4CO*T.i/100)
ts.S4CO2.i<-which.max(S4CO2.c>=S4CO2*T.i/100)
min(tr.s2)
# 2.2.2 determine temperature at each percentile time step
T.S2.i<-sample[["Pyrolysis"]][["t"]][min(tr.s2)+ts.S2.i]
sample[["Cursors"]]["curs1.1"]+ts.S2.i
min(tr.s2)
ts.S2.i
min(tr.s2)+ts.S2.i
sample[["Pyrolysis"]][["t"]]
sample[["Pyrolysis"]][["t"]][1]
sample$Pyrolysis$CO[1]
sample$Pyrolysis$CO[0]
# 2.2.2 determine temperature at each percentile time step
T.S2.i<-sample[["Pyrolysis"]][["t"]][min(tr.s2)+ts.S2.i]
# 2.2.2 determine temperature at each percentile time step
T.S2.i<-sample[["Pyrolysis"]][["T"]][min(tr.s2)+ts.S2.i]
T.S3CO.i<-sample[["Pyrolysis"]][["T"]][min(tr.s3CO)+ts.S3CO.i]
T.S3CO2.i<-sample[["Pyrolysis"]][["T"]][min(tr.s3CO2)+ts.S3CO2.i]
T.S4CO.i<-sample[["Oxidation"]][["T"]][min(tr.s4CO)+ts.S4CO.i]
T.S4CO2.i<-sample[["Oxidation"]][["T"]][min(tr.s4CO2)+ts.S4CO2.i]
#2.2 for loop to apply variable number of T's to list
value.v<-c()
for (i in 1:length(vector)) {
# 2.2.1 determine time step at which each percentile is reached
T.i<-vector[i]
ts.S2.i<-which.max(S2.c>=S2*T.i/100)
ts.S3CO.i<-which.max(S3CO.c>=S3CO*T.i/100)
ts.S3CO2.i<-which.max(S3CO2.c>=S3CO2*T.i/100)
ts.S4CO.i<-which.max(S4CO.c>=S4CO*T.i/100)
ts.S4CO2.i<-which.max(S4CO2.c>=S4CO2*T.i/100)
# 2.2.2 determine temperature at each percentile time step
T.S2.i<-sample[["Pyrolysis"]][["T"]][min(tr.s2)+ts.S2.i]
T.S3CO.i<-sample[["Pyrolysis"]][["T"]][min(tr.s3CO)+ts.S3CO.i]
T.S3CO2.i<-sample[["Pyrolysis"]][["T"]][min(tr.s3CO2)+ts.S3CO2.i]
T.S4CO.i<-sample[["Oxidation"]][["T"]][min(tr.s4CO)+ts.S4CO.i]
T.S4CO2.i<-sample[["Oxidation"]][["T"]][min(tr.s4CO2)+ts.S4CO2.i]
# 2.2.2 get the temperature value at this time step into vector
value.v<-c(value.v,T.S2.i,T.S3CO.i,T.S3CO2.i,T.S4CO.i,T.S4CO2.i)
}
names.T<-paste0(rep(zones,length(vector)),"_T",vector)
names.T
names.T<-paste0(rep(zones,length(vector)),"_T",rep(vector, each=length(zones)))
names.T
#2.2.3 name the values and return
names(value.v)<-names.T
values.T
value.v
sort(value.v)
value.v[order(names(value.v))]
devtools::load_all()
devtools::load_all()
dataloc<-"D:/PhD/Rock-Eval/Maarten_2501 - Copy/BULK ROCK"
rm(list=ls())
library(tidyverse)
devtools::load_all()
dataloc<-"D:/PhD/Rock-Eval/Maarten_2501 - Copy/BULK ROCK"
test<-RE_read(dataloc)
test2<-RE_convert(test)
test3<-RE_surfaces(test2)
test4<-RE_metrics(test3)
test5<-RE_SebagIR(test4)
View(test5)
test6<-RE_Tpercentiles(test5,c(10,25,50,75,90))
vector<-c(10,25,50,75,90)
names.T<-paste0(rep(zones,length(vector)),"_T",rep(vector, each=length(zones)))
#1.2 name of zones and the T's based on the input vector
zones<-c("S2","S3CO","S3CO2","S4CO","S4CO2")
names.T<-paste0(rep(zones,length(vector)),"_T",rep(vector, each=length(zones)))
devtools::load_all()
test6<-RE_Tpercentiles(test5,c(10,25,50,75,90))
list.extended<-test5
#1.2 name of zones and the T's based on the input vector
zones<-c("S2","S3CO","S3CO2","S4CO","S4CO2")
names.T<-paste0(rep(zones,length(vector)),"_T",rep(vector, each=length(zones)))
#1.3 define safe sequence in case of NAs
s.seq<-function(x,y){
if (all(is.na(x))|all(is.na(y))) {NA} else {
seq(x,y,by=1)}
}
#2.1 determine the cumulative area at each time step for all zones
list.extended<-lapply(list.extended, function(sample){
#2.1.1 Determine time ranges between Rock-Eval cursors
tr.s2<-s.seq(sample[["Cursors"]]["curs1.1"],length(sample[["Pyrolysis"]][["t"]]))
tr.s3CO<-s.seq(1,sample[["Cursors"]]["curs2.2"])
tr.s3CO2<-s.seq(1,sample[["Cursors"]]["curs3.2"])
tr.s4CO<-s.seq(1,sample[["Cursors"]]["curs5.2"])
tr.s4CO2<-s.seq(1,sample[["Cursors"]]["curs6.2"])
#2.1.2 Compute the area between these cursors
S2<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s2],sample[["Pyrolysis"]][["CH"]][tr.s2])
S2.c<-RE_cumtraparea(sample[["Pyrolysis"]][["t"]][tr.s2],sample[["Pyrolysis"]][["CH"]][tr.s2])
S3CO<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s3CO],sample[["Pyrolysis"]][["CO"]][tr.s3CO])
S3CO.c<-RE_cumtraparea(sample[["Pyrolysis"]][["t"]][tr.s3CO],sample[["Pyrolysis"]][["CO"]][tr.s3CO])
S3CO2<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s3CO2],sample[["Pyrolysis"]][["CO2"]][tr.s3CO2])
S3CO2.c<-RE_cumtraparea(sample[["Pyrolysis"]][["t"]][tr.s3CO2],sample[["Pyrolysis"]][["CO2"]][tr.s3CO2])
S4CO<-RE_traparea(sample[["Oxidation"]][["t"]][tr.s4CO],sample[["Oxidation"]][["CO"]][tr.s4CO])
S4CO.c<-RE_cumtraparea(sample[["Oxidation"]][["t"]][tr.s4CO],sample[["Oxidation"]][["CO"]][tr.s4CO])
S4CO2<-RE_traparea(sample[["Oxidation"]][["t"]][tr.s4CO2],sample[["Oxidation"]][["CO2"]][tr.s4CO2])
S4CO2.c<-RE_cumtraparea(sample[["Oxidation"]][["t"]][tr.s4CO2],sample[["Oxidation"]][["CO2"]][tr.s4CO2])
#2.2 for loop to apply variable number of T's to list
value.v<-c()
for (i in 1:length(vector)) {
# 2.2.1 determine time step at which each percentile is reached
T.i<-vector[i]
ts.S2.i<-which.max(S2.c>=S2*T.i/100)
ts.S3CO.i<-which.max(S3CO.c>=S3CO*T.i/100)
ts.S3CO2.i<-which.max(S3CO2.c>=S3CO2*T.i/100)
ts.S4CO.i<-which.max(S4CO.c>=S4CO*T.i/100)
ts.S4CO2.i<-which.max(S4CO2.c>=S4CO2*T.i/100)
# 2.2.2 determine temperature at each percentile time step
T.S2.i<-sample[["Pyrolysis"]][["T"]][min(tr.s2)+ts.S2.i]
T.S3CO.i<-sample[["Pyrolysis"]][["T"]][min(tr.s3CO)+ts.S3CO.i]
T.S3CO2.i<-sample[["Pyrolysis"]][["T"]][min(tr.s3CO2)+ts.S3CO2.i]
T.S4CO.i<-sample[["Oxidation"]][["T"]][min(tr.s4CO)+ts.S4CO.i]
T.S4CO2.i<-sample[["Oxidation"]][["T"]][min(tr.s4CO2)+ts.S4CO2.i]
# 2.2.2 get the temperature value at this time step into vector
value.v<-c(value.v,T.S2.i,T.S3CO.i,T.S3CO2.i,T.S4CO.i,T.S4CO2.i)
}
#2.2.3 name the values and return
names(value.v)<-names.T
value.v
value.v[order(names(value.v))]
})
#2.1.1 Determine time ranges between Rock-Eval cursors
tr.s2<-s.seq(sample[["Cursors"]]["curs1.1"],length(sample[["Pyrolysis"]][["t"]]))
sample<-list.extended[[1]]
#2.1.1 Determine time ranges between Rock-Eval cursors
tr.s2<-s.seq(sample[["Cursors"]]["curs1.1"],length(sample[["Pyrolysis"]][["t"]]))
tr.s3CO<-s.seq(1,sample[["Cursors"]]["curs2.2"])
tr.s3CO2<-s.seq(1,sample[["Cursors"]]["curs3.2"])
tr.s4CO<-s.seq(1,sample[["Cursors"]]["curs5.2"])
tr.s4CO2<-s.seq(1,sample[["Cursors"]]["curs6.2"])
#2.1.2 Compute the area between these cursors
S2<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s2],sample[["Pyrolysis"]][["CH"]][tr.s2])
S2.c<-RE_cumtraparea(sample[["Pyrolysis"]][["t"]][tr.s2],sample[["Pyrolysis"]][["CH"]][tr.s2])
S3CO<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s3CO],sample[["Pyrolysis"]][["CO"]][tr.s3CO])
S3CO.c<-RE_cumtraparea(sample[["Pyrolysis"]][["t"]][tr.s3CO],sample[["Pyrolysis"]][["CO"]][tr.s3CO])
S3CO2<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s3CO2],sample[["Pyrolysis"]][["CO2"]][tr.s3CO2])
S3CO2.c<-RE_cumtraparea(sample[["Pyrolysis"]][["t"]][tr.s3CO2],sample[["Pyrolysis"]][["CO2"]][tr.s3CO2])
S4CO<-RE_traparea(sample[["Oxidation"]][["t"]][tr.s4CO],sample[["Oxidation"]][["CO"]][tr.s4CO])
S4CO.c<-RE_cumtraparea(sample[["Oxidation"]][["t"]][tr.s4CO],sample[["Oxidation"]][["CO"]][tr.s4CO])
S4CO2<-RE_traparea(sample[["Oxidation"]][["t"]][tr.s4CO2],sample[["Oxidation"]][["CO2"]][tr.s4CO2])
S4CO2.c<-RE_cumtraparea(sample[["Oxidation"]][["t"]][tr.s4CO2],sample[["Oxidation"]][["CO2"]][tr.s4CO2])
#2.2 for loop to apply variable number of T's to list
value.v<-c()
for (i in 1:length(vector)) {
# 2.2.1 determine time step at which each percentile is reached
T.i<-vector[i]
ts.S2.i<-which.max(S2.c>=S2*T.i/100)
ts.S3CO.i<-which.max(S3CO.c>=S3CO*T.i/100)
ts.S3CO2.i<-which.max(S3CO2.c>=S3CO2*T.i/100)
ts.S4CO.i<-which.max(S4CO.c>=S4CO*T.i/100)
ts.S4CO2.i<-which.max(S4CO2.c>=S4CO2*T.i/100)
# 2.2.2 determine temperature at each percentile time step
T.S2.i<-sample[["Pyrolysis"]][["T"]][min(tr.s2)+ts.S2.i]
T.S3CO.i<-sample[["Pyrolysis"]][["T"]][min(tr.s3CO)+ts.S3CO.i]
T.S3CO2.i<-sample[["Pyrolysis"]][["T"]][min(tr.s3CO2)+ts.S3CO2.i]
T.S4CO.i<-sample[["Oxidation"]][["T"]][min(tr.s4CO)+ts.S4CO.i]
T.S4CO2.i<-sample[["Oxidation"]][["T"]][min(tr.s4CO2)+ts.S4CO2.i]
# 2.2.2 get the temperature value at this time step into vector
value.v<-c(value.v,T.S2.i,T.S3CO.i,T.S3CO2.i,T.S4CO.i,T.S4CO2.i)
}
#2.2.3 name the values and return
names(value.v)<-names.T
value.v
value.v<-value.v[order(names(value.v))]
#2.1 determine the cumulative area at each time step for all zones
list.extended<-lapply(list.extended, function(sample){
#2.1.1 Determine time ranges between Rock-Eval cursors
tr.s2<-s.seq(sample[["Cursors"]]["curs1.1"],length(sample[["Pyrolysis"]][["t"]]))
tr.s3CO<-s.seq(1,sample[["Cursors"]]["curs2.2"])
tr.s3CO2<-s.seq(1,sample[["Cursors"]]["curs3.2"])
tr.s4CO<-s.seq(1,sample[["Cursors"]]["curs5.2"])
tr.s4CO2<-s.seq(1,sample[["Cursors"]]["curs6.2"])
#2.1.2 Compute the area between these cursors
S2<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s2],sample[["Pyrolysis"]][["CH"]][tr.s2])
S2.c<-RE_cumtraparea(sample[["Pyrolysis"]][["t"]][tr.s2],sample[["Pyrolysis"]][["CH"]][tr.s2])
S3CO<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s3CO],sample[["Pyrolysis"]][["CO"]][tr.s3CO])
S3CO.c<-RE_cumtraparea(sample[["Pyrolysis"]][["t"]][tr.s3CO],sample[["Pyrolysis"]][["CO"]][tr.s3CO])
S3CO2<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s3CO2],sample[["Pyrolysis"]][["CO2"]][tr.s3CO2])
S3CO2.c<-RE_cumtraparea(sample[["Pyrolysis"]][["t"]][tr.s3CO2],sample[["Pyrolysis"]][["CO2"]][tr.s3CO2])
S4CO<-RE_traparea(sample[["Oxidation"]][["t"]][tr.s4CO],sample[["Oxidation"]][["CO"]][tr.s4CO])
S4CO.c<-RE_cumtraparea(sample[["Oxidation"]][["t"]][tr.s4CO],sample[["Oxidation"]][["CO"]][tr.s4CO])
S4CO2<-RE_traparea(sample[["Oxidation"]][["t"]][tr.s4CO2],sample[["Oxidation"]][["CO2"]][tr.s4CO2])
S4CO2.c<-RE_cumtraparea(sample[["Oxidation"]][["t"]][tr.s4CO2],sample[["Oxidation"]][["CO2"]][tr.s4CO2])
#2.2 for loop to apply variable number of T's to list
value.v<-c()
for (i in 1:length(vector)) {
# 2.2.1 determine time step at which each percentile is reached
T.i<-vector[i]
ts.S2.i<-which.max(S2.c>=S2*T.i/100)
ts.S3CO.i<-which.max(S3CO.c>=S3CO*T.i/100)
ts.S3CO2.i<-which.max(S3CO2.c>=S3CO2*T.i/100)
ts.S4CO.i<-which.max(S4CO.c>=S4CO*T.i/100)
ts.S4CO2.i<-which.max(S4CO2.c>=S4CO2*T.i/100)
# 2.2.2 determine temperature at each percentile time step
T.S2.i<-sample[["Pyrolysis"]][["T"]][min(tr.s2)+ts.S2.i]
T.S3CO.i<-sample[["Pyrolysis"]][["T"]][min(tr.s3CO)+ts.S3CO.i]
T.S3CO2.i<-sample[["Pyrolysis"]][["T"]][min(tr.s3CO2)+ts.S3CO2.i]
T.S4CO.i<-sample[["Oxidation"]][["T"]][min(tr.s4CO)+ts.S4CO.i]
T.S4CO2.i<-sample[["Oxidation"]][["T"]][min(tr.s4CO2)+ts.S4CO2.i]
# 2.2.2 get the temperature value at this time step into vector
value.v<-c(value.v,T.S2.i,T.S3CO.i,T.S3CO2.i,T.S4CO.i,T.S4CO2.i)
}
#2.2.3 name the values and return
names(value.v)<-names.T
value.v<-value.v[order(names(value.v))]
sample[["Tpercentiles"]]<-value.v
sample
})
#2.1.1 Determine time ranges between Rock-Eval cursors
tr.s2<-s.seq(sample[["Cursors"]]["curs1.1"],length(sample[["Pyrolysis"]][["t"]]))
tr.s3CO<-s.seq(1,sample[["Cursors"]]["curs2.2"])
tr.s3CO2<-s.seq(1,sample[["Cursors"]]["curs3.2"])
tr.s4CO<-s.seq(1,sample[["Cursors"]]["curs5.2"])
tr.s4CO2<-s.seq(1,sample[["Cursors"]]["curs6.2"])
#2.1.2 Compute the area between these cursors
S2<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s2],sample[["Pyrolysis"]][["CH"]][tr.s2])
S2.c<-RE_cumtraparea(sample[["Pyrolysis"]][["t"]][tr.s2],sample[["Pyrolysis"]][["CH"]][tr.s2])
S3CO<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s3CO],sample[["Pyrolysis"]][["CO"]][tr.s3CO])
S3CO.c<-RE_cumtraparea(sample[["Pyrolysis"]][["t"]][tr.s3CO],sample[["Pyrolysis"]][["CO"]][tr.s3CO])
S3CO2<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s3CO2],sample[["Pyrolysis"]][["CO2"]][tr.s3CO2])
S3CO2.c<-RE_cumtraparea(sample[["Pyrolysis"]][["t"]][tr.s3CO2],sample[["Pyrolysis"]][["CO2"]][tr.s3CO2])
S4CO<-RE_traparea(sample[["Oxidation"]][["t"]][tr.s4CO],sample[["Oxidation"]][["CO"]][tr.s4CO])
S4CO.c<-RE_cumtraparea(sample[["Oxidation"]][["t"]][tr.s4CO],sample[["Oxidation"]][["CO"]][tr.s4CO])
S4CO2<-RE_traparea(sample[["Oxidation"]][["t"]][tr.s4CO2],sample[["Oxidation"]][["CO2"]][tr.s4CO2])
S4CO2.c<-RE_cumtraparea(sample[["Oxidation"]][["t"]][tr.s4CO2],sample[["Oxidation"]][["CO2"]][tr.s4CO2])
test6<-RE_Tpercentiles(test5[1:5],c(10,25,50,75,90))
View(test6)
View(test6)
test6<-RE_Tpercentiles(test5[[1:5]],c(10,25,50,75,90))
test6<-RE_Tpercentiles(test5[1:5],c(10,25,50,75,90))
test5<-test5[1:5]
View(test5)
test6<-RE_Tpercentiles(test5,c(10,25,50,75,90))
min(NA)
names.T<-15
names.T<-c(1,2,3,4,5)
#2.2 for loop to apply variable number of T's to list
value.v<-c(rep(NA,length(names.T)))
rm(list=ls())
library(tidyverse)
devtools::load_all()
dataloc<-"D:/PhD/Rock-Eval/Maarten_2501 - Copy/BULK ROCK"
test<-RE_read(dataloc)
test2<-RE_convert(test)
test3<-RE_surfaces(test2)
test4<-RE_metrics(test3)
test5<-RE_SebagIR(test4)
test6<-RE_Tpercentiles(test5,c(10,25,50,75,90))
View(test6)
test6<-RE_Tpercentiles(test5,c(10,25,50,75,90))
View(test6)
devtools::load_all()
test6<-RE_Tpercentiles(test5,c(10,25,50,75,90))
i<-1
#1.2 name of zones and the T's based on the input vector
zones<-c("S2","S3CO","S3CO2","S4CO","S4CO2")
1:length(zones)+length(zones)*(i-1)
i<-2
1:length(zones)+length(zones)*(i-1)
i<-3
1:length(zones)+length(zones)*(i-1)
devtools::load_all()
test6<-RE_Tpercentiles(test5,c(10,25,50,75,90))
#2.2 for loop to apply variable number of T's to list
value.v<-c(rep(NA,length(names.T)))
names.T<-paste0(rep(zones,length(vector)),"_T",rep(vector, each=length(zones)))
#2.2 for loop to apply variable number of T's to list
value.v<-c(rep(NA,length(names.T)))
names.T<-paste0(rep(zones,length(vector)),"_T",rep(vector, each=length(zones)))
#1.2 name of zones and the T's based on the input vector
zones<-c("S2","S3CO","S3CO2","S4CO","S4CO2")
value.v<-c(rep(NA,15))
value.v[1:length(zones)+length(zones)*(i-1)]
value.v<-1:15
value.v[1:length(zones)+length(zones)*(i-1)]
test6<-RE_Tpercentiles(test5,c(10,25,50,75,90))
test5<-test5[1:5]
test6<-RE_Tpercentiles(test5,c(10,25,50,75,90))
View(test6)
test5<-RE_SebagIR(test4)
sample<-test5$S_2501_0054.B00
#1.2 name of zones and the T's based on the input vector
zones<-c("S2","S3CO","S3CO2","S4CO","S4CO2")
vector<-c(25,50,75)
#1.2 name of zones and the T's based on the input vector
zones<-c("S2","S3CO","S3CO2","S4CO","S4CO2")
names.T<-paste0(rep(zones,length(vector)),"_T",rep(vector, each=length(zones)))
#1.3 define safe sequence in case of NAs
s.seq<-function(x,y){
if (all(is.na(x))|all(is.na(y))) {NA} else {
seq(x,y,by=1)}
}
#2.1.1 Determine time ranges between Rock-Eval cursors
tr.s2<-s.seq(sample[["Cursors"]]["curs1.1"],length(sample[["Pyrolysis"]][["t"]]))
tr.s3CO<-s.seq(1,sample[["Cursors"]]["curs2.2"])
tr.s3CO2<-s.seq(1,sample[["Cursors"]]["curs3.2"])
tr.s4CO<-s.seq(1,sample[["Cursors"]]["curs5.2"])
tr.s4CO2<-s.seq(1,sample[["Cursors"]]["curs6.2"])
#2.1.2 Compute the area between these cursors
S2<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s2],sample[["Pyrolysis"]][["CH"]][tr.s2])
S2.c<-RE_cumtraparea(sample[["Pyrolysis"]][["t"]][tr.s2],sample[["Pyrolysis"]][["CH"]][tr.s2])
S3CO<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s3CO],sample[["Pyrolysis"]][["CO"]][tr.s3CO])
S3CO.c<-RE_cumtraparea(sample[["Pyrolysis"]][["t"]][tr.s3CO],sample[["Pyrolysis"]][["CO"]][tr.s3CO])
S3CO2<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s3CO2],sample[["Pyrolysis"]][["CO2"]][tr.s3CO2])
S3CO2.c<-RE_cumtraparea(sample[["Pyrolysis"]][["t"]][tr.s3CO2],sample[["Pyrolysis"]][["CO2"]][tr.s3CO2])
S4CO<-RE_traparea(sample[["Oxidation"]][["t"]][tr.s4CO],sample[["Oxidation"]][["CO"]][tr.s4CO])
S4CO.c<-RE_cumtraparea(sample[["Oxidation"]][["t"]][tr.s4CO],sample[["Oxidation"]][["CO"]][tr.s4CO])
S4CO2<-RE_traparea(sample[["Oxidation"]][["t"]][tr.s4CO2],sample[["Oxidation"]][["CO2"]][tr.s4CO2])
S4CO2.c<-RE_cumtraparea(sample[["Oxidation"]][["t"]][tr.s4CO2],sample[["Oxidation"]][["CO2"]][tr.s4CO2])
#2.2 for loop to apply variable number of T's to list
value.v<-c(rep(NA,length(names.T)))
# 2.2.1 determine time step at which each percentile is reached
T.i<-vector[i]
ts.S2.i<-which.max(S2.c>=S2*T.i/100)
ts.S3CO.i<-which.max(S3CO.c>=S3CO*T.i/100)
ts.S3CO2.i<-which.max(S3CO2.c>=S3CO2*T.i/100)
ts.S4CO.i<-which.max(S4CO.c>=S4CO*T.i/100)
ts.S4CO2.i<-which.max(S4CO2.c>=S4CO2*T.i/100)
# 2.2.2 determine temperature at each percentile time step
T.S2.i<-sample[["Pyrolysis"]][["T"]][min(tr.s2)+ts.S2.i]
T.S3CO.i<-sample[["Pyrolysis"]][["T"]][min(tr.s3CO)+ts.S3CO.i]
T.S3CO2.i<-sample[["Pyrolysis"]][["T"]][min(tr.s3CO2)+ts.S3CO2.i]
T.S4CO.i<-sample[["Oxidation"]][["T"]][min(tr.s4CO)+ts.S4CO.i]
T.S4CO2.i<-sample[["Oxidation"]][["T"]][min(tr.s4CO2)+ts.S4CO2.i]
# 2.2.2 get the temperature value at this time step into vector
value.v[1:length(zones)+length(zones)*(i-1)]<-
c(T.S2.i,T.S3CO.i,T.S3CO2.i,T.S4CO.i,T.S4CO2.i)
is.null(tr.S2.i)
is.null(ts.S2.i)
length(ts.S2.i)
ts.S2.i<-ifelse(length(ts.S2.i)==0, NA, ts.S2.i)
# 2.2.1 determine time step at which each percentile is reached
T.i<-vector[i]
ts.S2.i<-which.max(S2.c>=S2*T.i/100)
ts.S2.i<-ifelse(length(ts.S2.i)==0, NA, ts.S2.i)
ts.S3CO.i<-which.max(S3CO.c>=S3CO*T.i/100)
ts.S3CO.i<-ifelse(length(ts.S3CO.i)==0, NA, ts.S3CO.i)
ts.S3CO2.i<-which.max(S3CO2.c>=S3CO2*T.i/100)
ts.S3CO2.i<-ifelse(length(ts.S3CO2.i)==0, NA, ts.S3CO2.i)
ts.S4CO.i<-which.max(S4CO.c>=S4CO*T.i/100)
ts.S4CO.i<-ifelse(length(ts.S4CO.i)==0, NA, ts.S4CO.i)
ts.S4CO2.i<-which.max(S4CO2.c>=S4CO2*T.i/100)
ts.S4CO2.i<-ifelse(length(ts.S4CO2.i)==0, NA, ts.S4CO2.i)
# 2.2.2 determine temperature at each percentile time step
T.S2.i<-sample[["Pyrolysis"]][["T"]][min(tr.s2)+ts.S2.i]
T.S3CO.i<-sample[["Pyrolysis"]][["T"]][min(tr.s3CO)+ts.S3CO.i]
T.S3CO2.i<-sample[["Pyrolysis"]][["T"]][min(tr.s3CO2)+ts.S3CO2.i]
T.S4CO.i<-sample[["Oxidation"]][["T"]][min(tr.s4CO)+ts.S4CO.i]
T.S4CO2.i<-sample[["Oxidation"]][["T"]][min(tr.s4CO2)+ts.S4CO2.i]
# 2.2.2 get the temperature value at this time step into vector
value.v[1:length(zones)+length(zones)*(i-1)]<-
c(T.S2.i,T.S3CO.i,T.S3CO2.i,T.S4CO.i,T.S4CO2.i)
devtools::load_all()
test5<-RE_SebagIR(test4)
#test5<-test5[1:5]
test6<-RE_Tpercentiles(test5,c(10,25,50,75,90))
View(test6)
