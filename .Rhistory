sample$Zones_C
devtools::load_all()
devtools::load_all()
idee<-RE_customarea(test8,"Pyrolysis","CO2",c(200,300,450))
devtools::load_all()
idee<-RE_customarea(test8[1],"Pyrolysis","CO2",c(200,300,450))
sample<-test8$S_2501_0001.B00
oven<-"Pyrolysis"
sample[[oven]][["T"]]
devtools::load_all()
idee<-RE_customarea(test8[1],"Pyrolysis","CO2",c(200,300,450))
devtools::load_all()
idee<-RE_customarea(test8[1],"Pyrolysis","CO2",c(200,300,450))
View(idee)
devtools::load_all()
idee<-RE_customarea(test8[1],"Pyrolysis","CO2",c(200,300,450))
devtools::load_all()
idee<-RE_customarea(test8[1],"Pyrolysis","CO2",c(200,300,450))
View(idee)
idee<-RE_customarea(test8,"Pyrolysis","CO2",c(200,300,450))
devtools::document()
devtools::document()
rm(list=ls())
library(tidyverse)
devtools::load_all()
dataloc<-"D:/PhD/Rock-Eval/Maarten_2501 - Copy/BULK ROCK"
data<-RE_read(dataloc)
test<-RE_cursadjust(data)
RE_plot(test,3,"Pyrolysis","CO2")
RE_plot(test,10,"Pyrolysis","CO2")
test2<-RE_convert(test)
test3<-RE_surfaces(test2, time.inlude = TRUE)
test3<-RE_surfaces(test2)
devtools::load_all()
test3<-RE_surfaces(test2, time.include = TRUE)
test3<-RE_surfaces(test2, time.include = TRUE)
sample<-test2$S_2501_0001.B00
#1.1 take list to extend
list.extended<-list
#1.2 define safe sequence in case of NAs
s.seq<-function(x,y){
if (all(is.na(x))|all(is.na(y))) {NA} else {
seq(x,y,by=1)}
}
#2.1.1 Determine time ranges between Rock-Eval cursors
tr.s1<-s.seq(1,sample[["Cursors"]]["curs1.1"])
tr.s2<-s.seq(sample[["Cursors"]]["curs1.1"]+1,length(sample[["Pyrolysis"]][["t"]]))
tr.s3CO<-s.seq(1,sample[["Cursors"]]["curs2.2"])
tr.s3COi<-s.seq(sample[["Cursors"]]["curs2.2"]+1,length(sample[["Pyrolysis"]][["t"]]))
tr.s3CO2<-s.seq(1,sample[["Cursors"]]["curs3.2"])
tr.s3CO2i<-s.seq(sample[["Cursors"]]["curs3.2"]+1,length(sample[["Pyrolysis"]][["t"]]))
tr.s4CO<-s.seq(1,sample[["Cursors"]]["curs5.2"])
tr.s4COi<-s.seq(sample[["Cursors"]]["curs5.2"]+1,length(sample[["Oxidation"]][["t"]]))
tr.s4CO2<-s.seq(1,sample[["Cursors"]]["curs6.2"])
tr.s5<-s.seq(sample[["Cursors"]]["curs6.2"]+1,length(sample[["Oxidation"]][["t"]]))
#2.1.2 Compute the area between these cursors
S1<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s1],sample[["Pyrolysis"]][["CH"]][tr.s1])
S2<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s2],sample[["Pyrolysis"]][["CH"]][tr.s2])
S3CO<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s3CO],sample[["Pyrolysis"]][["CO"]][tr.s3CO])
S3COi<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s3COi],sample[["Pyrolysis"]][["CO"]][tr.s3COi])
S3CO2<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s3CO2],sample[["Pyrolysis"]][["CO2"]][tr.s3CO2])
S3CO2i<-RE_traparea(sample[["Pyrolysis"]][["t"]][tr.s3CO2i],sample[["Pyrolysis"]][["CO2"]][tr.s3CO2i])
S4CO<-RE_traparea(sample[["Oxidation"]][["t"]][tr.s4CO],sample[["Oxidation"]][["CO"]][tr.s4CO])
S4COi<-RE_traparea(sample[["Oxidation"]][["t"]][tr.s4COi],sample[["Oxidation"]][["CO"]][tr.s4COi])
S4CO2<-RE_traparea(sample[["Oxidation"]][["t"]][tr.s4CO2],sample[["Oxidation"]][["CO2"]][tr.s4CO2])
S5<-RE_traparea(sample[["Oxidation"]][["t"]][tr.s5],sample[["Oxidation"]][["CO2"]][tr.s5])
#2.1.3 Return the values as an addition to the original list
zones<-c(S1=S1, S2=S2,
S3CO=S3CO, S3COi=S3COi, S3CO2=S3CO2, S3CO2i=S3CO2i,
S4CO=S4CO, S4COi=S4COi, S4CO2=S4CO2, S5=S5)
sample[["Zones_C"]]<-zones
#3.1 Take values as time series instead of areas
S1.t<-sample[["Pyrolysis"]][["CH"]][tr.s1]
S2.t<-sample[["Pyrolysis"]][["CH"]][tr.s2]
S3CO.t<-sample[["Pyrolysis"]][["CO"]][tr.s3CO]
S3COi.t<-sample[["Pyrolysis"]][["CO"]][tr.s3COi]
S3CO2.t<-sample[["Pyrolysis"]][["CO2"]][tr.s3CO2]
S3CO2i.t<-sample[["Pyrolysis"]][["CO2"]][tr.s3CO2i]
S4CO.t<-sample[["Oxidation"]][["CO"]][tr.s4CO]
S4COi.t<-sample[["Oxidation"]][["CO"]][tr.s4COi]
S4CO2.t<-sample[["Oxidation"]][["CO2"]][tr.s4CO2]
S5.t<-sample[["Oxidation"]][["CO2"]][tr.s5]
#3.2 Make time series continuous over entire time range
S1<-c(S1.t,S2.t*0)
S2<-c(S1.t*0,S2.t)
S3CO<-c(S3CO.t,S3COi.t/2)
S3COi<-c(S3CO.t*0,S3COi.t/2)
S3CO2<-c(S3CO2.t,S3CO2i.t*0)
S3CO2i<-c(S3CO2.t*0,S3CO2i.t)
S4CO<-c(S4CO.t,S4COi.t*0)
S4COi<-c(S4CO.t*0,S4COi.t)
S4CO2<-c(S4CO2.t,S5.t*0)
S5<-c(S4CO2.t*0,S5.t)
#3.3 Combine and return
values.P<-data.frame(S1=S1, S2=S2,
S3CO=S3CO, S3COi=S3COi,
S3CO2=S3CO2, S3CO2i=S3CO2i)
values.O<-data.frame(S4CO=S4CO, S4COi=S4COi,
S4CO2=S4CO2, S5=S5)
sample[["Pyrolysis"]]<-cbind(sample[["Pyrolysis"]],values.P)
sample[["Oxidation"]]<-cbind(sample[["Oxidation"]],values.O)
devtools::load_all()
test3<-RE_surfaces(test2, time.include = TRUE)
test4<-RE_metrics(test3)
test5<-RE_SebagIR(test4)
test6<-RE_Tpercentiles(test5)
test7<-RE_Ccombined(test6)
test8<-RE_OHcombined(test7)
idee<-RE_customarea(test8,"Pyrolysis","CO2",c(200,300,450))
View(idee)
View(data)
View(test8)
rm(list=ls())
library(tidyverse)
devtools::load_all()
dataloc<-"D:/PhD/Rock-Eval/Maarten_2501/BULK ROCK"
# Read
REdata<-RE_read(dataloc)
warnings()
# Fix cursors
REdata.adj<-RE_cursadjust(data)
# Fix cursors
REdata.adj<-RE_cursadjust(REdata)
View(REdata)
View(REdata)
# Remove incorrect data
REdata$S_2501_0018.B00
# Remove incorrect data
REdata$S_2501_0018.B00<-NULL
# Fix cursors
REdata.adj<-RE_cursadjust(REdata)
RE_plot(REdat[30])
RE_plot(REdata[30])
RE_plot(REdata[[30]])
RE_plot(REdata,30)
check<-RE_cursadjust(REdata[30],plot=T)
RE_plot(REdata,30)
View(check)
RE_plot(REdata.adj,30)
RE_plot(REdata.adj,41)
RE_plot(REdata.adj,44)
RE_plot(REdata.adj,45)
RE_plot(REdata.adj,56)
RE_plot(REdata.adj,63)
RE_plot(REdata.adj,84)
RE_plot(REdata.adj,104)
# Convert and calculate metrics
REdata.adj<-RE_convert(REdata.adj)
REdata.adj<-RE_surfaces(REdata.adj)
REdata.adj<-RE_SebagIR(REdata.adj)
dattable<-RE_extracttable(REdata.adj)
View(dattable)
write.csv(dattable,"out.csv")
# Fix cursors
REdata.adj<-RE_cursadjust(REdata)
RE_plot(REdata.adj,104)
# Convert and calculate metrics
REdata.adj<-RE_convert(REdata.adj)
REdata.adj<-RE_surfaces(REdata.adj)
REdata.adj<-RE_metrics(REdata.adj)
REdata.adj<-RE_SebagIR(REdata.adj)
dattable<-RE_extracttable(REdata.adj)
write.csv(dattable,"out.csv")
write.csv(dattable,"/DUMP/out.csv")
write.csv(dattable,"./DUMP/out.csv")
dattable<-RE_extracttable(REdata.adj)
View(dattable)
devtools::load_all()
dattable<-RE_extracttable(REdata.adj)
write.csv(dattable,"./DUMP/out.csv")
write.csv(dattable,"./DUMP/out.csv")
rm(list=ls())
library(readxl)
library(tidyverse)
# Read Excel (adjust sheet/path)
data <- read_excel("//WURNET.NL/Homes/hoef006/My Documents/- Data/MIXED SAMPLE DATA.xlsx", "Mix 23", "A1:A606", col_names = FALSE)
colnames(data)<-"main"
data<-data[!is.na(data$main),]
data$mix<-NA
int<- read_excel("//WURNET.NL/Homes/hoef006/My Documents/- Data/METADATA.xlsx", "Properties", col_names = TRUE)
int<-int[!is.na(int$CMNT),]
for (i in 1:nrow(data[str_detect(data$main,"Sample/ composition"),])) {
data$mix[str_detect(data$main,"Sample/ composition")][i]<-i}
for (i in 2:nrow(data)) {
if(is.na(data$mix[i])){
data$mix[i]<-data$mix[i-1]}
}
data.int<-data
data.int$main[data.int$main!="Sample/ composition"]<-
int$DID[match(
data.int$main[data.int$main!="Sample/ composition"],
int$SAMPLE)]
out<-data.frame(n=1:74,main=NA,comp=NA)
for (i in 1:max(data$mix)) {
cut<-data$main[data$mix==i]
out$main[i]<-cut[2]
out$comp[i]<-paste(cut[3:length(cut)], collapse="; ")
}
out.int<-data.frame(n=1:74,main=NA,comp=NA)
for (i in 1:max(data.int$mix)) {
cut<-data.int$main[data.int$mix==i]
out.int$main[i]<-cut[2]
out.int$comp[i]<-paste(cut[3:length(cut)], collapse="; ")
}
out.alt<-data.frame(n=1:74,main=NA,comp=NA)
for (i in 1:max(data.int$mix)) {
cut<-data.int$main[data.int$mix==i]
out.alt$main[i]<-cut[2]
out.alt$comp[i]<-list(cut[3:length(cut)])
}
out.alt<-out.alt %>% unnest_wider(comp, names_sep = ".")
out.alt$n<-NULL
out.alt$comment<-str_extract(out$main,"(?<=\\_).*")
out.alt$comment<-gsub("ME_","Hamburg ",out.alt$comment)
out.alt$comment<-gsub("HB_","Bremen ",out.alt$comment)
out.alt$comment<-gsub("GS_","Groningen ",out.alt$comment)
out.alt$comment<-gsub("RS_","Rostock ",out.alt$comment)
write.excel <- function(x,row.names=FALSE,col.names=TRUE,...) {
write.table(x,"clipboard",sep="\t",row.names=row.names,col.names=col.names,na = "",...)
}
write.excel(out.alt)
data <- read_excel("//WURNET.NL/Homes/hoef006/My Documents/- Data/MIXED SAMPLE DATA.xlsx", "Mix 24", "A1:A606", col_names = FALSE)
colnames(data)<-"main"
data<-data[!is.na(data$main),]
data$mix<-NA
int<- read_excel("//WURNET.NL/Homes/hoef006/My Documents/- Data/METADATA.xlsx", "Properties", col_names = TRUE)
int<-int[!is.na(int$CMNT),]
for (i in 1:nrow(data[str_detect(data$main,"Sample/ composition"),])) {
data$mix[str_detect(data$main,"Sample/ composition")][i]<-i}
for (i in 2:nrow(data)) {
if(is.na(data$mix[i])){
data$mix[i]<-data$mix[i-1]}
}
data.int<-data
data.int$main[data.int$main!="Sample/ composition"]<-
int$DID[match(
data.int$main[data.int$main!="Sample/ composition"],
int$SAMPLE)]
out<-data.frame(n=1:74,main=NA,comp=NA)
for (i in 1:max(data$mix)) {
cut<-data$main[data$mix==i]
out$main[i]<-cut[2]
out$comp[i]<-paste(cut[3:length(cut)], collapse="; ")
}
out.int<-data.frame(n=1:74,main=NA,comp=NA)
for (i in 1:max(data.int$mix)) {
cut<-data.int$main[data.int$mix==i]
out.int$main[i]<-cut[2]
out.int$comp[i]<-paste(cut[3:length(cut)], collapse="; ")
}
out.alt<-data.frame(n=1:74,main=NA,comp=NA)
for (i in 1:max(data.int$mix)) {
cut<-data.int$main[data.int$mix==i]
out.alt$main[i]<-cut[2]
out.alt$comp[i]<-list(cut[3:length(cut)])
}
out.alt<-out.alt %>% unnest_wider(comp, names_sep = ".")
out.alt$n<-NULL
out.alt$comment<-str_extract(out$main,"(?<=\\_).*")
out.alt$comment<-gsub("ME_","Hamburg ",out.alt$comment)
out.alt$comment<-gsub("HB_","Bremen ",out.alt$comment)
out.alt$comment<-gsub("GS_","Groningen ",out.alt$comment)
out.alt$comment<-gsub("RS_","Rostock ",out.alt$comment)
write.excel <- function(x,row.names=FALSE,col.names=TRUE,...) {
write.table(x,"clipboard",sep="\t",row.names=row.names,col.names=col.names,na = "",...)
}
write.excel(out.alt)
data <- read_excel("//WURNET.NL/Homes/hoef006/My Documents/- Data/MIXED SAMPLE DATA.xlsx", "Mix 25", "A1:A606", col_names = FALSE)
colnames(data)<-"main"
data<-data[!is.na(data$main),]
data$mix<-NA
int<- read_excel("//WURNET.NL/Homes/hoef006/My Documents/- Data/METADATA.xlsx", "Properties", col_names = TRUE)
int<-int[!is.na(int$CMNT),]
for (i in 1:nrow(data[str_detect(data$main,"Sample/ composition"),])) {
data$mix[str_detect(data$main,"Sample/ composition")][i]<-i}
for (i in 2:nrow(data)) {
if(is.na(data$mix[i])){
data$mix[i]<-data$mix[i-1]}
}
data.int<-data
data.int$main[data.int$main!="Sample/ composition"]<-
int$DID[match(
data.int$main[data.int$main!="Sample/ composition"],
int$SAMPLE)]
out<-data.frame(n=1:74,main=NA,comp=NA)
for (i in 1:max(data$mix)) {
cut<-data$main[data$mix==i]
out$main[i]<-cut[2]
out$comp[i]<-paste(cut[3:length(cut)], collapse="; ")
}
out.int<-data.frame(n=1:74,main=NA,comp=NA)
for (i in 1:max(data.int$mix)) {
cut<-data.int$main[data.int$mix==i]
out.int$main[i]<-cut[2]
out.int$comp[i]<-paste(cut[3:length(cut)], collapse="; ")
}
out.alt<-data.frame(n=1:74,main=NA,comp=NA)
for (i in 1:max(data.int$mix)) {
cut<-data.int$main[data.int$mix==i]
out.alt$main[i]<-cut[2]
out.alt$comp[i]<-list(cut[3:length(cut)])
}
out.alt<-out.alt %>% unnest_wider(comp, names_sep = ".")
out.alt$n<-NULL
out.alt$comment<-str_extract(out$main,"(?<=\\_).*")
out.alt$comment<-gsub("ME_","Hamburg ",out.alt$comment)
out.alt$comment<-gsub("HB_","Bremen ",out.alt$comment)
out.alt$comment<-gsub("GS_","Groningen ",out.alt$comment)
out.alt$comment<-gsub("RS_","Rostock ",out.alt$comment)
write.excel <- function(x,row.names=FALSE,col.names=TRUE,...) {
write.table(x,"clipboard",sep="\t",row.names=row.names,col.names=col.names,na = "",...)
}
write.excel(out.alt)
devtools::document()
devtools::load_all()
?RE_metrics
?RE_SebagIR
devtools::document()
devtools::load_all()
?RE_SebagIR
readRDS("voormaarten.RDS")
Nick<-readRDS("voormaarten.RDS")
View(Nick)
names(Nick)
devtools::load_all()
#Load packages into library
library(tidyverse)
str_detect("MAOM",names(Nick))
names(Nick)
str_detect("Opom",names(Nick))
str_detect("Opo",names(Nick))
str_detect("Opom_",names(Nick))
str_detect("MAOM",names(Nick))
str_detect("L11",names(Nick))
which(str_detect("MAOM",names(Nick)))
names<-names(Nick)
which(str_detect("MAOM",names))
names[8]
names<-
which(str_detect(names(Nick),"NAMES"))
names<-
which(str_detect(names(Nick),"MAOM"))
Nick.M<-which(str_detect(names(Nick),"MAOM"))
Nick.P<-which(str_detect(names(Nick),"Fpom"))
Nick.M<-Nick[which(str_detect(names(Nick),"MAOM"))]
Nick.P<-Nick[which(str_detect(names(Nick),"Fpom"))]
plot(Nick.M[[1]]$Pyrolysis$t,Nick.M[[1]]$Pyrolysis$CO2)
plot(Nick.M[[1]]$Pyrolysis$t,Nick.M[[1]]$Pyrolysis$CO2, type="l")
plot(Nick.M[[1]]$Pyrolysis$t,Nick.M[[1]]$Pyrolysis$CO2, type="l", col="red2")
apply(Nick.M, function(sample){lines(sample$Pyrolysis$CO2, col="red2")})
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$CO2, col="red2")})
Nick.M<-Nick.M[which(str_detect(names(Nick),"LSR07"))]
plot(Nick.M[[1]]$Pyrolysis$t,Nick.M[[1]]$Pyrolysis$CO2, type="l", col="red2")
Nick<-readRDS("voormaarten.RDS")
Nick.M<-Nick[which(str_detect(names(Nick),"MAOM"))]
names(Nick.M)
Nick.M<-Nick.M[which(str_detect(names(Nick),"L07"))]
Nick.P<-Nick[which(str_detect(names(Nick),"Fpom"))]
Nick<-readRDS("voormaarten.RDS")
Nick.M<-Nick[which(str_detect(names(Nick),"MAOM"))]
Nick.M<-Nick.M[which(str_detect(names(Nick.M),"L07"))]
View(Nick.M)
Nick.M<-Nick[which(str_detect(names(Nick),"MAOM"))]
Nick.M<-Nick.M[which(str_detect(names(Nick.M),"L09"))]
Nick.P<-Nick[which(str_detect(names(Nick),"Fpom"))]
Nick.P<-Nick.P[which(str_detect(names(Nick.P),"L09"))]
plot(Nick.M[[1]]$Pyrolysis$t,Nick.M[[1]]$Pyrolysis$CO2, type="l", col="red2")
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$CO2, col="red2")})
lapply(Nick.P, function(sample){lines(sample$Pyrolysis$CO2, col="blue3")})
plot(Nick.P[[1]]$Pyrolysis$t,Nick.P[[1]]$Pyrolysis$CO2, type="l", col="blue3")
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$CO2, col="red2")})
lapply(Nick.P, function(sample){lines(sample$Pyrolysis$CO2, col="blue3")})
Nick.M<-Nick[which(str_detect(names(Nick),"MAOM"))]
Nick.M<-Nick.M[which(str_detect(names(Nick.M),"L14"))]
Nick.P<-Nick[which(str_detect(names(Nick),"Fpom"))]
Nick.P<-Nick.P[which(str_detect(names(Nick.P),"L14"))]
plot(Nick.P[[1]]$Pyrolysis$t,Nick.P[[1]]$Pyrolysis$CO2, type="l", col="blue3")
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$CO2, col="red2")})
lapply(Nick.P, function(sample){lines(sample$Pyrolysis$CO2, col="blue3")})
Nick.M<-Nick[which(str_detect(names(Nick),"MAOM"))]
Nick.M<-Nick.M[which(str_detect(names(Nick.M),"L12"))]
Nick.P<-Nick[which(str_detect(names(Nick),"Fpom"))]
Nick.P<-Nick.P[which(str_detect(names(Nick.P),"L12"))]
plot(Nick.P[[1]]$Pyrolysis$t,Nick.P[[1]]$Pyrolysis$CO2, type="l", col="blue3")
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$CO2, col="red2")})
lapply(Nick.P, function(sample){lines(sample$Pyrolysis$CO2, col="blue3")})
Nick.M<-Nick[which(str_detect(names(Nick),"MAOM"))]
Nick.P<-Nick[which(str_detect(names(Nick),"Fpom"))]
plot(Nick.P[[1]]$Pyrolysis$t,Nick.P[[1]]$Pyrolysis$CO2, type="l", col="blue3")
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$CO2, col="red2")})
lapply(Nick.P, function(sample){lines(sample$Pyrolysis$CO2, col="blue3")})
plot(Nick.P[[1]]$Pyrolysis$t,Nick.P[[1]]$Pyrolysis$CO2, type="l", col="blue3")
lapply(Nick.P, function(sample){lines(sample$Pyrolysis$CO2, col="blue3")})
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$CO2, col="red2")})
plot(Nick.P[[1]]$Pyrolysis$t,Nick.P[[1]]$Pyrolysis$CO2, type="l", col="blue3")
lapply(Nick.P, function(sample){lines(sample$Pyrolysis$CO2, col="blue3")})
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$CO2, col="red2")})
Nick.O<-Nick[which(str_detect(names(Nick),"Opom"))]
lapply(Nick.O, function(sample){lines(sample$Pyrolysis$CO2, col="green3")})
View(Nick)
plot(Nick.P[[1]]$Pyrolysis$t,Nick.P[[1]]$Pyrolysis$POO, type="l", col="blue3")
lapply(Nick.P, function(sample){lines(sample$Pyrolysis$POO, col="blue3")})
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$POO, col="red2")})
lapply(Nick.O, function(sample){lines(sample$Pyrolysis$POO, col="green3")})
plot(Nick.P[[1]]$Pyrolysis$t,Nick.P[[1]]$Pyrolysis$PO, type="l", col="blue3")
lapply(Nick.P, function(sample){lines(sample$Pyrolysis$PO, col="blue3")})
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$PO, col="red2")})
lapply(Nick.O, function(sample){lines(sample$Pyrolysis$PO, col="green3")})
Nick.M<-Nick[which(str_detect(names(Nick),"MAOM"))]
Nick.M<-Nick.M[which(str_detect(names(Nick.M),"L09"))]
Nick.P<-Nick[which(str_detect(names(Nick),"Fpom"))]
Nick.P<-Nick.P[which(str_detect(names(Nick.P),"L09"))]
plot(Nick.P[[1]]$Pyrolysis$t,Nick.P[[1]]$Pyrolysis$PO, type="l", col="blue3")
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$PO, col="red2")})
lapply(Nick.P, function(sample){lines(sample$Pyrolysis$PO, col="blue3")})
Nick.M<-Nick[which(str_detect(names(Nick),"MAOM"))]
Nick.M<-Nick.M[which(str_detect(names(Nick.M),"L12"))]
Nick.P<-Nick[which(str_detect(names(Nick),"Fpom"))]
Nick.P<-Nick.P[which(str_detect(names(Nick.P),"L12"))]
plot(Nick.P[[1]]$Pyrolysis$t,Nick.P[[1]]$Pyrolysis$PO, type="l", col="blue3")
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$PO, col="red2")})
lapply(Nick.P, function(sample){lines(sample$Pyrolysis$PO, col="blue3")})
plot(Nick.P[[1]]$Pyrolysis$t,Nick.P[[1]]$Pyrolysis$PO, type="l", col="blue3")
lapply(Nick.P, function(sample){lines(sample$Pyrolysis$PO, col="blue3")})
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$PO, col="red2")})
lapply(Nick.O, function(sample){lines(sample$Pyrolysis$PO, col="green3")})
plot(Nick.P[[1]]$Pyrolysis$t,Nick.P[[1]]$Pyrolysis$PO, type="l", col="blue3")
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$PO, col="red2")})
lapply(Nick.P, function(sample){lines(sample$Pyrolysis$PO, col="blue3")})
plot(Nick.P[[1]]$Pyrolysis$t,Nick.P[[1]]$Pyrolysis$PO, type="l", col="blue3")
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$PO, col="red2")})
lapply(Nick.P, function(sample){lines(sample$Pyrolysis$PO, col="blue3")})
plot(Nick.P[[1]]$Pyrolysis$t,Nick.P[[1]]$Pyrolysis$PH, type="l", col="blue3")
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$PH, col="red2")})
lapply(Nick.P, function(sample){lines(sample$Pyrolysis$PH, col="blue3")})
plot(Nick.P[[1]]$Pyrolysis$t,Nick.P[[1]]$Pyrolysis$POO, type="l", col="blue3")
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$POO, col="red2")})
lapply(Nick.P, function(sample){lines(sample$Pyrolysis$POO, col="blue3")})
plot(Nick.P[[1]]$Pyrolysis$t,Nick.P[[1]]$Pyrolysis$CO2, type="l", col="red2")
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$CO2, col="red2")})
plot(Nick.M[[1]]$Pyrolysis$t,Nick.P[[1]]$Pyrolysis$CO2, type="l", col="red2")
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$CO2, col="red2")})
plot(Nick.M[[1]]$Pyrolysis$t,Nick.M[[1]]$Pyrolysis$CO2, type="l", col="red2")
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$CO2, col="red2")})
View(Nick)
RE_plot(Nick,1)
RE_plot(Nick,5)
Nick$B_L01R2.B00$Cursors
Nick$B_L01R2.B00$Cursors["curs3.2"]
Nick$B_L01R2.B00$Pyrolysis$T[633]
Nick<-readRDS("voormaarten2.RDS")
Nick<-readRDS("./DUMP/voormaarten2.RDS")
Nick.M<-Nick[which(str_detect(names(Nick),"MAOM"))]
Nick.P<-Nick[which(str_detect(names(Nick),"Fpom"))]
Nick.O<-Nick[which(str_detect(names(Nick),"Opom"))]
Nick.M<-Nick[which(str_detect(names(Nick),"MAOM"))]
Nick.M<-Nick.M[which(str_detect(names(Nick.M),"L12"))]
Nick.P<-Nick[which(str_detect(names(Nick),"Fpom"))]
Nick.P<-Nick.P[which(str_detect(names(Nick.P),"L12"))]
plot(Nick.P[[1]]$Pyrolysis$t,Nick.P[[1]]$Pyrolysis$POO, type="l", col="blue3")
View(Nick)
Nick<-readRDS("./DUMP/voormarteen.RDS")
Nick.M<-Nick[which(str_detect(names(Nick),"MAOM"))]
Nick.P<-Nick[which(str_detect(names(Nick),"Fpom"))]
Nick.O<-Nick[which(str_detect(names(Nick),"Opom"))]
Nick.M<-Nick[which(str_detect(names(Nick),"MAOM"))]
Nick.M<-Nick.M[which(str_detect(names(Nick.M),"L09"))]
Nick.P<-Nick[which(str_detect(names(Nick),"Fpom"))]
Nick.P<-Nick.P[which(str_detect(names(Nick.P),"L09"))]
plot(Nick.P[[1]]$Pyrolysis$t,Nick.P[[1]]$Pyrolysis$POO, type="l", col="blue3")
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$POO, col="red2")})
lapply(Nick.P, function(sample){lines(sample$Pyrolysis$POO, col="blue3")})
Nick.M<-Nick[which(str_detect(names(Nick),"MAOM"))]
Nick.M<-Nick.M[which(str_detect(names(Nick.M),"L12"))]
Nick.P<-Nick[which(str_detect(names(Nick),"Fpom"))]
Nick.P<-Nick.P[which(str_detect(names(Nick.P),"L12"))]
plot(Nick.P[[1]]$Pyrolysis$t,Nick.P[[1]]$Pyrolysis$POO, type="l", col="blue3")
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$POO, col="red2")})
lapply(Nick.P, function(sample){lines(sample$Pyrolysis$POO, col="blue3")})
plot(Nick.P[[1]]$Pyrolysis$t,Nick.P[[1]]$Pyrolysis$POO, type="l", col="blue3")
lapply(Nick.P, function(sample){lines(sample$Pyrolysis$POO, col="blue3")})
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$POO, col="red2")})
lapply(Nick.O, function(sample){lines(sample$Pyrolysis$POO, col="green3")})
plot(Nick.O[[1]]$Pyrolysis$t,Nick.O[[1]]$Pyrolysis$POO, type="l", col="green3")
lapply(Nick.P, function(sample){lines(sample$Pyrolysis$POO, col="blue3")})
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$POO, col="red2")})
lapply(Nick.O, function(sample){lines(sample$Pyrolysis$POO, col="green3")})
plot(Nick.O[[1]]$Pyrolysis$t,Nick.O[[1]]$Pyrolysis$POO, type="l", col="green3")
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$POO, col="red2")})
lapply(Nick.O, function(sample){lines(sample$Pyrolysis$POO, col="green3")})
lapply(Nick.P, function(sample){lines(sample$Pyrolysis$POO, col="blue3")})
Nick.M<-Nick[which(str_detect(names(Nick),"MAOM"))]
Nick.M<-Nick.M[which(str_detect(names(Nick.M),"L12"))]
Nick.P<-Nick[which(str_detect(names(Nick),"Fpom"))]
Nick.P<-Nick.P[which(str_detect(names(Nick.P),"L12"))]
plot(Nick.P[[1]]$Pyrolysis$t,Nick.P[[1]]$Pyrolysis$POO, type="l", col="blue3")
lapply(Nick.M, function(sample){lines(sample$Pyrolysis$POO, col="red2")})
lapply(Nick.P, function(sample){lines(sample$Pyrolysis$POO, col="blue3")})
RE_plot(Nick,5)
Nick$B_L01R2.B00$Cursors["curs3.2"]
Nick$B_L01R2.B00$Pyrolysis$T[633]
Nick$B_L01R2.B00$Pyrolysis$T[972]
curs<-sapply(Nick.M, function(sample){lines(sample$Cursors["curs3.2"]})
curs<-sapply(Nick.M, function(sample){sample$Cursors["curs3.2"]})
Nick.M<-Nick[which(str_detect(names(Nick),"MAOM"))]
Nick.P<-Nick[which(str_detect(names(Nick),"Fpom"))]
Nick.O<-Nick[which(str_detect(names(Nick),"Opom"))]
curs.M<-sapply(Nick.M, function(sample){sample$Cursors["curs3.2"]})
curs.P<-sapply(Nick.P, function(sample){sample$Cursors["curs3.2"]})
dif<-curs.M-curs.P
dif
mean(dif)
